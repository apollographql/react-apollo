// Generated by typings
// Source: node_modules/apollo-client/lib/src/middleware.d.ts
declare module '~apollo-client/middleware' {
import { Request } from '~apollo-client/networkInterface';
export interface MiddlewareRequest {
    request: Request;
    options: RequestInit;
}
export interface MiddlewareInterface {
    applyMiddleware(request: MiddlewareRequest, next: Function): any;
}
export class AuthTokenHeaderMiddleware implements MiddlewareInterface {
    private _token;
    private _header;
    setToken: (token: string) => void;
    setHeader: (header: string) => void;
    applyMiddleware: (request: MiddlewareRequest, next: Function) => void;
}
}
declare module 'apollo-client/middleware' {
export * from '~apollo-client/middleware';
}

// Generated by typings
// Source: node_modules/apollo-client/lib/src/networkInterface.d.ts
declare module '~apollo-client/networkInterface' {
import 'es6-promise';
import 'isomorphic-fetch';
import { GraphQLResult } from 'graphql';
import { MiddlewareInterface } from '~apollo-client/middleware';
export interface Request {
    debugName?: string;
    query?: string;
    variables?: Object;
}
export interface NetworkInterface {
    _uri: string;
    _opts: RequestInit;
    _middlewares: MiddlewareInterface[];
    query(request: Request): Promise<GraphQLResult>;
    use(middlewares: MiddlewareInterface[]): any;
}
export function createNetworkInterface(uri: string, opts?: RequestInit): NetworkInterface;
}
declare module 'apollo-client/networkInterface' {
export * from '~apollo-client/networkInterface';
}

// Generated by typings
// Source: node_modules/apollo-client/lib/src/data/store.d.ts
declare module '~apollo-client/data/store' {
import { ApolloAction } from '~apollo-client/actions';
import { QueryStore } from '~apollo-client/queries/store';
import { MutationStore } from '~apollo-client/mutations/store';
import { ApolloReducerConfig } from '~apollo-client/store';
export interface NormalizedCache {
    [dataId: string]: StoreObject;
}
export interface StoreObject {
    __typename?: string;
    [storeFieldKey: string]: StoreValue;
}
export type StoreValue = number | string | string[];
export function data(previousState: NormalizedCache, action: ApolloAction, queries: QueryStore, mutations: MutationStore, config: ApolloReducerConfig): NormalizedCache;
}
declare module 'apollo-client/data/store' {
export * from '~apollo-client/data/store';
}

// Generated by typings
// Source: node_modules/apollo-client/lib/src/queries/store.d.ts
declare module '~apollo-client/queries/store' {
import { ApolloAction } from '~apollo-client/actions';
import { SelectionSet, GraphQLError } from 'graphql';
export interface QueryStore {
    [queryId: string]: QueryStoreValue;
}
export interface QueryStoreValue {
    queryString: string;
    query: SelectionSetWithRoot;
    minimizedQueryString: string;
    minimizedQuery: SelectionSetWithRoot;
    variables: Object;
    loading: boolean;
    networkError: Error;
    graphQLErrors: GraphQLError[];
    forceFetch: boolean;
    returnPartialData: boolean;
}
export interface SelectionSetWithRoot {
    id: string;
    typeName: string;
    selectionSet: SelectionSet;
}
export function queries(previousState: QueryStore, action: ApolloAction): QueryStore;
}
declare module 'apollo-client/queries/store' {
export * from '~apollo-client/queries/store';
}

// Generated by typings
// Source: node_modules/apollo-client/lib/src/mutations/store.d.ts
declare module '~apollo-client/mutations/store' {
import { ApolloAction } from '~apollo-client/actions';
import { SelectionSet } from 'graphql';
export interface MutationStore {
    [mutationId: string]: MutationStoreValue;
}
export interface MutationStoreValue {
    mutationString: string;
    mutation: SelectionSetWithRoot;
    variables: Object;
    loading: boolean;
    error: Error;
}
export interface SelectionSetWithRoot {
    id: string;
    typeName: string;
    selectionSet: SelectionSet;
}
export function mutations(previousState: MutationStore, action: ApolloAction): MutationStore;
}
declare module 'apollo-client/mutations/store' {
export * from '~apollo-client/mutations/store';
}

// Generated by typings
// Source: node_modules/apollo-client/lib/src/actions.d.ts
declare module '~apollo-client/actions' {
import { GraphQLResult } from 'graphql';
import { SelectionSetWithRoot } from '~apollo-client/queries/store';
export interface QueryResultAction {
    type: 'QUERY_RESULT';
    result: GraphQLResult;
    queryId: string;
}
export function isQueryResultAction(action: ApolloAction): action is QueryResultAction;
export interface QueryErrorAction {
    type: 'QUERY_ERROR';
    error: Error;
    queryId: string;
}
export function isQueryErrorAction(action: ApolloAction): action is QueryErrorAction;
export interface QueryInitAction {
    type: 'QUERY_INIT';
    queryString: string;
    query: SelectionSetWithRoot;
    minimizedQueryString: string;
    minimizedQuery: SelectionSetWithRoot;
    variables: Object;
    forceFetch: boolean;
    returnPartialData: boolean;
    queryId: string;
}
export function isQueryInitAction(action: ApolloAction): action is QueryInitAction;
export interface QueryResultClientAction {
    type: 'QUERY_RESULT_CLIENT';
    result: GraphQLResult;
    complete: boolean;
    queryId: string;
}
export function isQueryResultClientAction(action: ApolloAction): action is QueryResultClientAction;
export interface QueryStopAction {
    type: 'QUERY_STOP';
    queryId: string;
}
export function isQueryStopAction(action: ApolloAction): action is QueryStopAction;
export interface MutationInitAction {
    type: 'MUTATION_INIT';
    mutationString: string;
    mutation: SelectionSetWithRoot;
    variables: Object;
    mutationId: string;
}
export function isMutationInitAction(action: ApolloAction): action is MutationInitAction;
export interface MutationResultAction {
    type: 'MUTATION_RESULT';
    result: GraphQLResult;
    mutationId: string;
}
export function isMutationResultAction(action: ApolloAction): action is MutationResultAction;
export type ApolloAction = QueryResultAction | QueryErrorAction | QueryInitAction | QueryResultClientAction | QueryStopAction | MutationInitAction | MutationResultAction;
}
declare module 'apollo-client/actions' {
export * from '~apollo-client/actions';
}

// Generated by typings
// Source: node_modules/apollo-client/lib/src/data/extensions.d.ts
declare module '~apollo-client/data/extensions' {
export type IdGetter = (value: Object) => string;
export const getIdField: (data: {
    id: any;
}) => any;
}
declare module 'apollo-client/data/extensions' {
export * from '~apollo-client/data/extensions';
}

// Generated by typings
// Source: node_modules/apollo-client/lib/src/store.d.ts
declare module '~apollo-client/store' {
import { NormalizedCache } from '~apollo-client/data/store';
import { QueryStore } from '~apollo-client/queries/store';
import { MutationStore } from '~apollo-client/mutations/store';
import { ApolloAction } from '~apollo-client/actions';
import { IdGetter } from '~apollo-client/data/extensions';
export interface Store {
    data: NormalizedCache;
    queries: QueryStore;
    mutations: MutationStore;
}
export interface ApolloStore {
    dispatch: (action: ApolloAction) => void;
    getState: () => any;
}
export function createApolloReducer(config: ApolloReducerConfig): Function;
export function createApolloStore({reduxRootKey, config}?: {
    reduxRootKey?: string;
    config?: ApolloReducerConfig;
}): ApolloStore;
export interface ApolloReducerConfig {
    dataIdFromObject?: IdGetter;
}
}
declare module 'apollo-client/store' {
export * from '~apollo-client/store';
}

// Generated by typings
// Source: node_modules/apollo-client/lib/src/QueryManager.d.ts
declare module '~apollo-client/QueryManager' {
import { NetworkInterface } from '~apollo-client/networkInterface';
import { ApolloStore } from '~apollo-client/store';
import { GraphQLResult } from 'graphql';
import { IdGetter } from '~apollo-client/data/extensions';
export class QueryManager {
    private networkInterface;
    private store;
    private reduxRootKey;
    private dataIdFromObject;
    private observers;
    private idCounter;
    constructor({networkInterface, store, reduxRootKey, dataIdFromObject}: {
        networkInterface: NetworkInterface;
        store: ApolloStore;
        reduxRootKey: string;
        dataIdFromObject?: IdGetter;
    });
    mutate({mutation, variables}: {
        mutation: string;
        variables?: Object;
    }): Promise<GraphQLResult>;
    watchQuery({query, variables, forceFetch, returnPartialData}: WatchQueryOptions): WatchedQueryHandle;
    broadcastNewStore(store: any): void;
    watchQueryInStore(queryId: string): WatchedQueryHandle;
    private stopQuery(queryId);
    private broadcastQueryChange(queryId, result);
    private broadcastQueryError(queryId, error);
    private registerObserver(queryId, observer);
}
export interface WatchedQueryHandle {
    id: string;
    isStopped: () => boolean;
    stop(): any;
    subscribe(observer: QueryObserver): any;
}
export type QueryResultCallback = (result: GraphQLResult) => void;
export interface QueryObserver {
    onResult: (result: GraphQLResult) => void;
    onError?: (error: Error) => void;
    onStop?: () => void;
}
export interface WatchQueryOptions {
    query: string;
    variables?: Object;
    forceFetch?: boolean;
    returnPartialData?: boolean;
}
}
declare module 'apollo-client/QueryManager' {
export * from '~apollo-client/QueryManager';
}

// Generated by typings
// Source: node_modules/apollo-client/lib/src/data/readFromStore.d.ts
declare module '~apollo-client/data/readFromStore' {
import { SelectionSet } from 'graphql';
import { NormalizedCache } from '~apollo-client/data/store';
export function readQueryFromStore({store, query, variables}: {
    store: NormalizedCache;
    query: string;
    variables?: Object;
}): Object;
export function readFragmentFromStore({store, fragment, rootId, variables}: {
    store: NormalizedCache;
    fragment: string;
    rootId: string;
    variables?: Object;
}): Object;
export function readSelectionSetFromStore({store, rootId, selectionSet, variables}: {
    store: NormalizedCache;
    rootId: string;
    selectionSet: SelectionSet;
    variables: Object;
}): Object;
}
declare module 'apollo-client/data/readFromStore' {
export * from '~apollo-client/data/readFromStore';
}

// Generated by typings
// Source: node_modules/apollo-client/lib/src/index.d.ts
declare module 'apollo-client' {
import { NetworkInterface, createNetworkInterface } from '~apollo-client/networkInterface';
import { GraphQLResult } from 'graphql';
import { createApolloStore, ApolloStore, createApolloReducer } from '~apollo-client/store';
import { QueryManager, WatchedQueryHandle, WatchQueryOptions } from '~apollo-client/QueryManager';
import { readQueryFromStore, readFragmentFromStore } from '~apollo-client/data/readFromStore';
export { createNetworkInterface, createApolloStore, createApolloReducer, readQueryFromStore, readFragmentFromStore };
export default class ApolloClient {
    networkInterface: NetworkInterface;
    store: ApolloStore;
    reduxRootKey: string;
    queryManager: QueryManager;
    constructor({networkInterface, reduxRootKey}?: {
        networkInterface?: NetworkInterface;
        reduxRootKey?: string;
    });
    watchQuery: (options: WatchQueryOptions) => WatchedQueryHandle;
    query: (options: WatchQueryOptions) => Promise<GraphQLResult | Error>;
    mutate: (options: {
        mutation: string;
        variables?: Object;
    }) => Promise<GraphQLResult>;
    reducer(): Function;
    middleware: () => (store: ApolloStore) => (next: any) => (action: any) => any;
    initStore(): void;
    private setStore;
}
}
