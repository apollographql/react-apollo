// Generated by typings
// Source: node_modules/apollo-client/middleware.d.ts
declare module '~apollo-client/middleware' {
import { Request } from '~apollo-client/networkInterface';
export interface MiddlewareRequest {
    request: Request;
    options: RequestInit;
}
export interface MiddlewareInterface {
    applyMiddleware(request: MiddlewareRequest, next: Function): any;
}
}
declare module 'apollo-client/middleware' {
export * from '~apollo-client/middleware';
}

// Generated by typings
// Source: node_modules/apollo-client/networkInterface.d.ts
declare module '~apollo-client/networkInterface' {
import 'whatwg-fetch';
import { GraphQLResult, Document } from 'graphql';
import { MiddlewareInterface } from '~apollo-client/middleware';
export interface Request {
    debugName?: string;
    query?: Document;
    variables?: Object;
    operationName?: string;
}
export interface PrintedRequest {
    debugName?: string;
    query?: string;
    variables?: Object;
    operationName?: string;
}
export interface NetworkInterface {
    [others: string]: any;
    query(request: Request): Promise<GraphQLResult>;
}
export interface BatchedNetworkInterface extends NetworkInterface {
    batchQuery(requests: Request[]): Promise<GraphQLResult[]>;
}
export interface HTTPNetworkInterface extends BatchedNetworkInterface {
    _uri: string;
    _opts: RequestInit;
    _middlewares: MiddlewareInterface[];
    use(middlewares: MiddlewareInterface[]): any;
}
export interface RequestAndOptions {
    request: Request;
    options: RequestInit;
}
export function addQueryMerging(networkInterface: NetworkInterface): BatchedNetworkInterface;
export function printRequest(request: Request): PrintedRequest;
export function createNetworkInterface(uri: string, opts?: RequestInit): HTTPNetworkInterface;
}
declare module 'apollo-client/networkInterface' {
export * from '~apollo-client/networkInterface';
}

// Generated by typings
// Source: node_modules/apollo-client/data/store.d.ts
declare module '~apollo-client/data/store' {
import { ApolloAction } from '~apollo-client/actions';
import { QueryStore } from '~apollo-client/queries/store';
import { MutationStore } from '~apollo-client/mutations/store';
import { ApolloReducerConfig } from '~apollo-client/store';
export interface NormalizedCache {
    [dataId: string]: StoreObject;
}
export interface StoreObject {
    __typename?: string;
    [storeFieldKey: string]: StoreValue;
}
export type StoreValue = number | string | string[];
export function data(previousState: NormalizedCache, action: ApolloAction, queries: QueryStore, mutations: MutationStore, config: ApolloReducerConfig): NormalizedCache;
}
declare module 'apollo-client/data/store' {
export * from '~apollo-client/data/store';
}

// Generated by typings
// Source: node_modules/apollo-client/queries/store.d.ts
declare module '~apollo-client/queries/store' {
import { ApolloAction } from '~apollo-client/actions';
import { FragmentMap } from '~apollo-client/queries/getFromAST';
import { SelectionSet, GraphQLError } from 'graphql';
export interface QueryStore {
    [queryId: string]: QueryStoreValue;
}
export interface QueryStoreValue {
    queryString: string;
    query: SelectionSetWithRoot;
    minimizedQueryString: string;
    minimizedQuery: SelectionSetWithRoot;
    variables: Object;
    loading: boolean;
    networkError: Error;
    graphQLErrors: GraphQLError[];
    forceFetch: boolean;
    returnPartialData: boolean;
    lastRequestId: number;
    fragmentMap: FragmentMap;
}
export interface SelectionSetWithRoot {
    id: string;
    typeName: string;
    selectionSet: SelectionSet;
}
export function queries(previousState: QueryStore, action: ApolloAction): QueryStore;
}
declare module 'apollo-client/queries/store' {
export * from '~apollo-client/queries/store';
}

// Generated by typings
// Source: node_modules/apollo-client/mutations/store.d.ts
declare module '~apollo-client/mutations/store' {
import { ApolloAction } from '~apollo-client/actions';
import { SelectionSet } from 'graphql';
import { FragmentMap } from '~apollo-client/queries/getFromAST';
export interface MutationStore {
    [mutationId: string]: MutationStoreValue;
}
export interface MutationStoreValue {
    mutationString: string;
    mutation: SelectionSetWithRoot;
    variables: Object;
    loading: boolean;
    error: Error;
    fragmentMap: FragmentMap;
}
export interface SelectionSetWithRoot {
    id: string;
    typeName: string;
    selectionSet: SelectionSet;
}
export function mutations(previousState: MutationStore, action: ApolloAction): MutationStore;
}
declare module 'apollo-client/mutations/store' {
export * from '~apollo-client/mutations/store';
}

// Generated by typings
// Source: node_modules/apollo-client/actions.d.ts
declare module '~apollo-client/actions' {
import { GraphQLResult } from 'graphql';
import { SelectionSetWithRoot } from '~apollo-client/queries/store';
import { FragmentMap } from '~apollo-client/queries/getFromAST';
export interface QueryResultAction {
    type: 'APOLLO_QUERY_RESULT';
    result: GraphQLResult;
    queryId: string;
    requestId: number;
}
export function isQueryResultAction(action: ApolloAction): action is QueryResultAction;
export interface QueryErrorAction {
    type: 'APOLLO_QUERY_ERROR';
    error: Error;
    queryId: string;
    requestId: number;
}
export function isQueryErrorAction(action: ApolloAction): action is QueryErrorAction;
export interface QueryInitAction {
    type: 'APOLLO_QUERY_INIT';
    queryString: string;
    query: SelectionSetWithRoot;
    minimizedQueryString: string;
    minimizedQuery: SelectionSetWithRoot;
    variables: Object;
    forceFetch: boolean;
    returnPartialData: boolean;
    queryId: string;
    requestId: number;
    fragmentMap: FragmentMap;
}
export function isQueryInitAction(action: ApolloAction): action is QueryInitAction;
export interface QueryResultClientAction {
    type: 'APOLLO_QUERY_RESULT_CLIENT';
    result: GraphQLResult;
    complete: boolean;
    queryId: string;
}
export function isQueryResultClientAction(action: ApolloAction): action is QueryResultClientAction;
export interface QueryStopAction {
    type: 'APOLLO_QUERY_STOP';
    queryId: string;
}
export function isQueryStopAction(action: ApolloAction): action is QueryStopAction;
export interface MutationInitAction {
    type: 'APOLLO_MUTATION_INIT';
    mutationString: string;
    mutation: SelectionSetWithRoot;
    variables: Object;
    mutationId: string;
    fragmentMap: FragmentMap;
}
export function isMutationInitAction(action: ApolloAction): action is MutationInitAction;
export interface MutationResultAction {
    type: 'APOLLO_MUTATION_RESULT';
    result: GraphQLResult;
    mutationId: string;
}
export function isMutationResultAction(action: ApolloAction): action is MutationResultAction;
export type ApolloAction = QueryResultAction | QueryErrorAction | QueryInitAction | QueryResultClientAction | QueryStopAction | MutationInitAction | MutationResultAction;
}
declare module 'apollo-client/actions' {
export * from '~apollo-client/actions';
}

// Generated by typings
// Source: node_modules/apollo-client/store.d.ts
declare module '~apollo-client/store' {
import { NormalizedCache } from '~apollo-client/data/store';
import { QueryStore } from '~apollo-client/queries/store';
import { MutationStore } from '~apollo-client/mutations/store';
import { ApolloAction } from '~apollo-client/actions';
import { IdGetter } from '~apollo-client/data/extensions';
export interface Store {
    data: NormalizedCache;
    queries: QueryStore;
    mutations: MutationStore;
}
export interface ApolloStore {
    dispatch: (action: ApolloAction) => void;
    getState: () => any;
}
export function createApolloReducer(config: ApolloReducerConfig): Function;
export function createApolloStore({reduxRootKey, initialState, config, reportCrashes}?: {
    reduxRootKey?: string;
    initialState?: any;
    config?: ApolloReducerConfig;
    reportCrashes?: boolean;
}): ApolloStore;
export interface ApolloReducerConfig {
    dataIdFromObject?: IdGetter;
}
}
declare module 'apollo-client/store' {
export * from '~apollo-client/store';
}

// Generated by typings
// Source: node_modules/apollo-client/util/Observable.d.ts
declare module '~apollo-client/util/Observable' {
export type CleanupFunction = () => void;
export type SubscriberFunction<T> = (observer: Observer<T>) => (Subscription | CleanupFunction);
export class Observable<T> {
    private subscriberFunction;
    constructor(subscriberFunction: SubscriberFunction<T>);
    subscribe(observer: Observer<T>): Subscription;
}
export interface Observer<T> {
    next?: (value: T) => void;
    error?: (error: Error) => void;
    complete?: () => void;
}
export interface Subscription {
    unsubscribe: CleanupFunction;
}
}
declare module 'apollo-client/util/Observable' {
export * from '~apollo-client/util/Observable';
}

// Generated by typings
// Source: node_modules/apollo-client/QueryManager.d.ts
declare module '~apollo-client/QueryManager' {
import { NetworkInterface } from '~apollo-client/networkInterface';
import { ApolloStore, Store } from '~apollo-client/store';
import { QueryStoreValue } from '~apollo-client/queries/store';
import { QueryTransformer } from '~apollo-client/queries/queryTransform';
import { GraphQLResult, Document } from 'graphql';
import { Observable, Observer, Subscription } from '~apollo-client/util/Observable';
export class ObservableQuery extends Observable<GraphQLResult> {
    subscribe(observer: Observer<GraphQLResult>): QuerySubscription;
    result(): Promise<GraphQLResult>;
}
export interface QuerySubscription extends Subscription {
    refetch(variables?: any): Promise<GraphQLResult>;
    stopPolling(): void;
    startPolling(pollInterval: number): void;
}
export interface WatchQueryOptions {
    query: Document;
    variables?: {
        [key: string]: any;
    };
    forceFetch?: boolean;
    returnPartialData?: boolean;
    pollInterval?: number;
}
export type QueryListener = (queryStoreValue: QueryStoreValue) => void;
export class QueryManager {
    private networkInterface;
    private store;
    private reduxRootKey;
    private pollingTimers;
    private queryTransformer;
    private queryListeners;
    private idCounter;
    private scheduler;
    private batcher;
    private batcherPollInterval;
    constructor({networkInterface, store, reduxRootKey, queryTransformer, shouldBatch}: {
        networkInterface: NetworkInterface;
        store: ApolloStore;
        reduxRootKey: string;
        queryTransformer?: QueryTransformer;
        shouldBatch?: Boolean;
    });
    broadcastNewStore(store: any): void;
    mutate({mutation, variables}: {
        mutation: Document;
        variables?: Object;
    }): Promise<GraphQLResult>;
    queryListenerForObserver(options: WatchQueryOptions, observer: Observer<GraphQLResult>): QueryListener;
    watchQuery(options: WatchQueryOptions): ObservableQuery;
    query(options: WatchQueryOptions): Promise<GraphQLResult>;
    fetchQuery(queryId: string, options: WatchQueryOptions): Promise<GraphQLResult>;
    generateQueryId(): string;
    stopQueryInStore(queryId: string): void;
    getApolloState(): Store;
    addQueryListener(queryId: string, listener: QueryListener): void;
    removeQueryListener(queryId: string): void;
    private fetchQueryOverInterface(queryId, options, network);
    private startQuery(options, listener);
    private stopQuery(queryId);
    private broadcastQueries();
    private generateRequestId();
}
}
declare module 'apollo-client/QueryManager' {
export * from '~apollo-client/QueryManager';
}

// Generated by typings
// Source: node_modules/apollo-client/queries/getFromAST.d.ts
declare module '~apollo-client/queries/getFromAST' {
import { Document, OperationDefinition, FragmentDefinition } from 'graphql';
export function getMutationDefinition(doc: Document): OperationDefinition;
export function checkDocument(doc: Document): void;
export function getOperationName(doc: Document): string;
export function getFragmentDefinitions(doc: Document): FragmentDefinition[];
export function getQueryDefinition(doc: Document): OperationDefinition;
export function getFragmentDefinition(doc: Document): FragmentDefinition;
export function replaceOperationDefinition(doc: Document, newOpDef: OperationDefinition): Document;
export interface FragmentMap {
    [fragmentName: string]: FragmentDefinition;
}
export function createFragmentMap(fragments: FragmentDefinition[]): FragmentMap;
}
declare module 'apollo-client/queries/getFromAST' {
export * from '~apollo-client/queries/getFromAST';
}

// Generated by typings
// Source: node_modules/apollo-client/data/readFromStore.d.ts
declare module '~apollo-client/data/readFromStore' {
import { SelectionSet, Document } from 'graphql';
import { FragmentMap } from '~apollo-client/queries/getFromAST';
import { NormalizedCache } from '~apollo-client/data/store';
export function readQueryFromStore({store, query, variables}: {
    store: NormalizedCache;
    query: Document;
    variables?: Object;
}): Object;
export function readFragmentFromStore({store, fragment, rootId, variables}: {
    store: NormalizedCache;
    fragment: Document;
    rootId: string;
    variables?: Object;
}): Object;
export function readSelectionSetFromStore({store, rootId, selectionSet, variables, returnPartialData, fragmentMap}: {
    store: NormalizedCache;
    rootId: string;
    selectionSet: SelectionSet;
    variables: Object;
    returnPartialData?: boolean;
    fragmentMap?: FragmentMap;
}): Object;
}
declare module 'apollo-client/data/readFromStore' {
export * from '~apollo-client/data/readFromStore';
}

// Generated by typings
// Source: node_modules/apollo-client/data/extensions.d.ts
declare module '~apollo-client/data/extensions' {
export type IdGetter = (value: Object) => string;
export const getIdField: (data: {
    id: any;
}) => any;
}
declare module 'apollo-client/data/extensions' {
export * from '~apollo-client/data/extensions';
}

// Generated by typings
// Source: node_modules/apollo-client/queries/queryTransform.d.ts
declare module '~apollo-client/queries/queryTransform' {
import { SelectionSet, OperationDefinition } from 'graphql';
export type QueryTransformer = (queryPiece: SelectionSet) => void;
export function addFieldToSelectionSet(fieldName: string, queryPiece: SelectionSet): SelectionSet;
export function addTypenameToSelectionSet(queryPiece: SelectionSet): SelectionSet;
export function addTypenameToQuery(queryDef: OperationDefinition): OperationDefinition;
export function applyTransformerToOperation(queryDef: OperationDefinition, queryTransformer: QueryTransformer): OperationDefinition;
}
declare module 'apollo-client/queries/queryTransform' {
export * from '~apollo-client/queries/queryTransform';
}

// Generated by typings
// Source: node_modules/apollo-client/index.d.ts
declare module '~apollo-client/index' {
import { NetworkInterface, createNetworkInterface } from '~apollo-client/networkInterface';
import { GraphQLResult, Document } from 'graphql';
import { createApolloStore, ApolloStore, createApolloReducer, ApolloReducerConfig } from '~apollo-client/store';
import { QueryManager, WatchQueryOptions, ObservableQuery } from '~apollo-client/QueryManager';
import { readQueryFromStore, readFragmentFromStore } from '~apollo-client/data/readFromStore';
import { IdGetter } from '~apollo-client/data/extensions';
import { QueryTransformer, addTypenameToSelectionSet } from '~apollo-client/queries/queryTransform';
export { createNetworkInterface, createApolloStore, createApolloReducer, readQueryFromStore, readFragmentFromStore, addTypenameToSelectionSet as addTypename };
export default class ApolloClient {
    networkInterface: NetworkInterface;
    store: ApolloStore;
    reduxRootKey: string;
    initialState: any;
    queryManager: QueryManager;
    reducerConfig: ApolloReducerConfig;
    queryTransformer: QueryTransformer;
    shouldBatch: boolean;
    constructor({networkInterface, reduxRootKey, initialState, dataIdFromObject, queryTransformer, shouldBatch}?: {
        networkInterface?: NetworkInterface;
        reduxRootKey?: string;
        initialState?: any;
        dataIdFromObject?: IdGetter;
        queryTransformer?: QueryTransformer;
        shouldBatch?: boolean;
    });
    watchQuery: (options: WatchQueryOptions) => ObservableQuery;
    query: (options: WatchQueryOptions) => Promise<GraphQLResult>;
    mutate: (options: {
        mutation: Document;
        variables?: Object;
    }) => Promise<GraphQLResult>;
    reducer(): Function;
    middleware: () => (store: ApolloStore) => (next: any) => (action: any) => any;
    initStore(): void;
    private setStore;
}
}
declare module 'apollo-client/index' {
export * from '~apollo-client/index';
export { default } from '~apollo-client/index';
}
declare module 'apollo-client' {
export * from '~apollo-client/index';
export { default } from '~apollo-client/index';
}
