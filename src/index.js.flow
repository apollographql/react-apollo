// @flow
import type {
  ApolloClient,
  MutationQueryReducersMap,
  ApolloQueryResult,
  ApolloError,
  FetchPolicy,
  FetchMoreOptions,
  UpdateQueryOptions,
  FetchMoreQueryOptions,
  SubscribeToMoreOptions,
  PureQueryOptions,
  MutationUpdaterFn,
} from 'apollo-client';
import type { DocumentNode, VariableDefinitionNode } from 'graphql';

export type NetworkStatus = 1 | 2 | 3 | 4 | 6 | 7 | 8;

export interface ProviderProps {
  client: ApolloClient;
}

declare export class ApolloProvider extends React$Component<ProviderProps> {
  childContextTypes: {
    client: ApolloClient,
  };
  contextTypes: {
    client: ApolloClient,
  };
  getChildContext(): {
    client: ApolloClient,
  };
  render(): React$Element<*>;
}

export type MutationFunc<TResult, TVariables> = (
  opts: MutationOpts<TVariables>,
) => Promise<ApolloQueryResult<TResult>>;

export type GraphqlData<TResult, TVariables> = GraphqlQueryControls &
  TResult & {
    variables: TVariables,
    refetch: (variables?: TVariables) => Promise<ApolloQueryResult<any>>,
  };

export type ChildProps<TOwnProps, TResult, TVariables: Object = {}> = {
  data: GraphqlData<TResult, TVariables>,
  mutate: MutationFunc<TResult, TVariables>,
} & TOwnProps;

// back compat
export type DefaultChildProps<P, R> = ChildProps<P, R, {}>;

export type ErrorPolicy = 'none' | 'ignore' | 'all';

export type RefetchQueriesProviderFn = (
  ...args: any[]
) => string[] | PureQueryOptions[];

export type MutationOpts<TVariables> = {
  variables?: TVariables,
  optimisticResponse?: Object,
  refetchQueries?: string[] | PureQueryOptions[] | RefetchQueriesProviderFn,
  update?: MutationUpdaterFn<*>,
  errorPolicy?: ErrorPolicy,
  $call?: empty, // Not function
};

export type QueryOpts<TVariables> = {
  ssr?: boolean,
  variables?: TVariables,
  fetchPolicy?: FetchPolicy,
  pollInterval?: number,
  skip?: boolean,
  errorPolicy?: ErrorPolicy,
  $call?: empty, // Not function
};

export interface GraphqlQueryControls {
  error?: ApolloError;
  networkStatus: NetworkStatus;
  loading: boolean;
  variables: Object;
  fetchMore: (
    fetchMoreOptions: FetchMoreQueryOptions & FetchMoreOptions,
  ) => Promise<ApolloQueryResult<any>>;
  refetch: (variables?: Object) => Promise<ApolloQueryResult<any>>;
  startPolling: (pollInterval: number) => void;
  stopPolling: () => void;
  subscribeToMore: (options: SubscribeToMoreOptions) => () => void;
  updateQuery: (
    mapFn: (previousQueryResult: any, options: UpdateQueryOptions) => any,
  ) => void;
}

export interface OptionProps<TProps, TResult, TVariables> {
  ownProps: TProps;
  data: GraphqlData<TResult, TVariables>;
  mutate: MutationFunc<TResult, TVariables>;
}

export type OptionDescription<TProps, TVariables> =
  | QueryOpts<TVariables>
  | MutationOpts<TVariables>
  | ((props: TProps) => QueryOpts<TVariables> | MutationOpts<TVariables>);

export type NamedProps<P, R> = P & {
  ownProps: R,
};

export interface OperationOption<
  TResult: {},
  TProps: {},
  TChildProps: {},
  TVariables: {},
> {
  +options?: OptionDescription<TProps, TVariables>;
  props?: (
    props: OptionProps<TProps, TResult, TVariables>,
  ) => TChildProps | ChildProps<TProps, TResult, TVariables>;
  +skip?: boolean | ((props: any) => boolean);
  name?: string;
  withRef?: boolean;
  shouldResubscribe?: (props: TProps, nextProps: TProps) => boolean;
  alias?: string;
}

// Third argument of TMergedProps should be TVariables, but generics order
// is preserved for backward compatibility.
export interface OperationComponent<
  TResult: Object = {},
  TOwnProps: Object = {},
  TMergedProps: Object = ChildProps<TOwnProps, TResult, {}>,
  TVariables: Object = {},
> {
  (
    component: React$ComponentType<TMergedProps>,
  ): React$ComponentType<TOwnProps>;
}

declare export function graphql<TResult, TProps, TChildProps, TVariables>(
  document: DocumentNode,
  operationOptions?: OperationOption<TResult, TProps, TChildProps, TVariables>,
): OperationComponent<TResult, TProps, TChildProps, TVariables>;

declare type WithApolloOptions = {
  withRef?: boolean,
};

declare export function withApollo<TProps>(
  component: React$ComponentType<{ client: ApolloClient } & TProps>,
  operationOptions?: WithApolloOptions,
): React$ComponentType<TProps>;

export interface IDocumentDefinition {
  type: DocumentType;
  name: string;
  variables: VariableDefinitionNode[];
}

declare export function parser(document: DocumentNode): IDocumentDefinition;

export interface Context {
  client?: ApolloClient;
  [key: string]: any;
}

export interface QueryTreeArgument {
  rootElement: React$Element<*>;
  rootContext?: Context;
}

export interface QueryResult {
  query: Promise<ApolloQueryResult<mixed>>;
  element: React$Element<*>;
  context: Context;
}

declare export function walkTree(
  element: React$Element<*>,
  context: Context,
  visitor: (
    element: React$Element<*>,
    instance: any,
    context: Context,
  ) => boolean | void,
): void;

declare export function getDataFromTree(
  rootElement: React$Element<*>,
  rootContext?: any,
  fetchRoot?: boolean,
): Promise<void>;

declare export function renderToStringWithData(
  component: React$Element<*>,
): Promise<string>;

declare export function cleanupApolloState(apolloState: any): void;
