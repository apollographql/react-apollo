{"map":"{\"version\":3,\"file\":\"Subscriptions.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/Subscriptions.tsx\"],\"names\":[],\"mappings\":\"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\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport { getClient } from './component-utils';\r\nvar shallowEqual = require('fbjs/lib/shallowEqual');\r\nvar invariant = require('invariant');\r\nvar Subscription = (function (_super) {\r\n    tslib_1.__extends(Subscription, _super);\r\n    function Subscription(props, context) {\r\n        var _this = _super.call(this, props, context) || this;\r\n        _this.initialize = function (props) {\r\n            if (_this.queryObservable)\r\n                return;\r\n            _this.queryObservable = _this.client.subscribe({\r\n                query: props.subscription,\r\n                variables: props.variables,\r\n                fetchPolicy: props.fetchPolicy,\r\n            });\r\n        };\r\n        _this.startSubscription = function () {\r\n            if (_this.querySubscription)\r\n                return;\r\n            _this.querySubscription = _this.queryObservable.subscribe({\r\n                next: _this.updateCurrentData,\r\n                error: _this.updateError,\r\n            });\r\n        };\r\n        _this.getInitialState = function () { return ({\r\n            loading: true,\r\n            error: undefined,\r\n            data: undefined,\r\n        }); };\r\n        _this.updateCurrentData = function (result) {\r\n            var _a = _this, client = _a.client, onSubscriptionData = _a.props.onSubscriptionData;\r\n            if (onSubscriptionData)\r\n                onSubscriptionData({ client: client, subscriptionData: result });\r\n            _this.setState({\r\n                data: result.data,\r\n                loading: false,\r\n                error: undefined,\r\n            });\r\n        };\r\n        _this.updateError = function (error) {\r\n            _this.setState({\r\n                error: error,\r\n                loading: false,\r\n            });\r\n        };\r\n        _this.endSubscription = function () {\r\n            if (_this.querySubscription) {\r\n                _this.querySubscription.unsubscribe();\r\n                delete _this.querySubscription;\r\n            }\r\n        };\r\n        _this.client = getClient(props, context);\r\n        _this.initialize(props);\r\n        _this.state = _this.getInitialState();\r\n        return _this;\r\n    }\r\n    Subscription.prototype.componentDidMount = function () {\r\n        this.startSubscription();\r\n    };\r\n    Subscription.prototype.componentWillReceiveProps = function (nextProps, nextContext) {\r\n        var nextClient = getClient(nextProps, nextContext);\r\n        if (shallowEqual(this.props.variables, nextProps.variables) &&\r\n            this.client === nextClient &&\r\n            this.props.subscription === nextProps.subscription) {\r\n            return;\r\n        }\r\n        var shouldResubscribe = nextProps.shouldResubscribe;\r\n        if (typeof shouldResubscribe === 'function') {\r\n            shouldResubscribe = !!shouldResubscribe(this.props, nextProps);\r\n        }\r\n        var shouldNotResubscribe = shouldResubscribe === false;\r\n        if (this.client !== nextClient) {\r\n            this.client = nextClient;\r\n        }\r\n        if (!shouldNotResubscribe) {\r\n            this.endSubscription();\r\n            delete this.queryObservable;\r\n            this.initialize(nextProps);\r\n            this.startSubscription();\r\n            this.setState(this.getInitialState());\r\n            return;\r\n        }\r\n        this.initialize(nextProps);\r\n        this.startSubscription();\r\n    };\r\n    Subscription.prototype.componentWillUnmount = function () {\r\n        this.endSubscription();\r\n    };\r\n    Subscription.prototype.render = function () {\r\n        var renderFn = this.props.children;\r\n        if (!renderFn)\r\n            return null;\r\n        var result = Object.assign({}, this.state, {\r\n            variables: this.props.variables,\r\n        });\r\n        return renderFn(result);\r\n    };\r\n    Subscription.contextTypes = {\r\n        client: PropTypes.object.isRequired,\r\n    };\r\n    Subscription.propTypes = {\r\n        subscription: PropTypes.object.isRequired,\r\n        variables: PropTypes.object,\r\n        children: PropTypes.func,\r\n        onSubscriptionData: PropTypes.func,\r\n        shouldResubscribe: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\r\n    };\r\n    return Subscription;\r\n}(React.Component));\r\nexport default Subscription;\r\n//# sourceMappingURL=Subscriptions.js.map","dts":{"name":"/Users/jovi/Documents/SideProjects/react-apollo/src/Subscriptions.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport ApolloClient, { ApolloError, FetchPolicy } from 'apollo-client';\r\nimport { DocumentNode } from 'graphql';\r\nimport { OperationVariables } from './types';\r\nexport interface SubscriptionResult<TData = any> {\r\n    loading: boolean;\r\n    data?: TData;\r\n    error?: ApolloError;\r\n}\r\nexport interface OnSubscriptionDataOptions<TData = any> {\r\n    client: ApolloClient<Object>;\r\n    subscriptionData: SubscriptionResult<TData>;\r\n}\r\nexport interface SubscriptionProps<TData = any, TVariables = OperationVariables> {\r\n    subscription: DocumentNode;\r\n    variables?: TVariables;\r\n    fetchPolicy?: FetchPolicy;\r\n    shouldResubscribe?: any;\r\n    client?: ApolloClient<Object>;\r\n    onSubscriptionData?: (options: OnSubscriptionDataOptions<TData>) => any;\r\n    children?: (result: SubscriptionResult<TData>) => React.ReactNode;\r\n}\r\nexport interface SubscriptionState<TData = any> {\r\n    loading: boolean;\r\n    data?: TData;\r\n    error?: ApolloError;\r\n}\r\nexport interface SubscriptionContext {\r\n    client?: ApolloClient<Object>;\r\n}\r\ndeclare class Subscription<TData = any, TVariables = any> extends React.Component<SubscriptionProps<TData, TVariables>, SubscriptionState<TData>> {\r\n    static contextTypes: {\r\n        client: PropTypes.Validator<object>;\r\n    };\r\n    static propTypes: {\r\n        subscription: PropTypes.Validator<object>;\r\n        variables: PropTypes.Requireable<object>;\r\n        children: PropTypes.Requireable<(...args: any[]) => any>;\r\n        onSubscriptionData: PropTypes.Requireable<(...args: any[]) => any>;\r\n        shouldResubscribe: PropTypes.Requireable<boolean | ((...args: any[]) => any)>;\r\n    };\r\n    private client;\r\n    private queryObservable?;\r\n    private querySubscription?;\r\n    constructor(props: SubscriptionProps<TData, TVariables>, context: SubscriptionContext);\r\n    componentDidMount(): void;\r\n    componentWillReceiveProps(nextProps: SubscriptionProps<TData, TVariables>, nextContext: SubscriptionContext): void;\r\n    componentWillUnmount(): void;\r\n    render(): any;\r\n    private initialize;\r\n    private startSubscription;\r\n    private getInitialState;\r\n    private updateCurrentData;\r\n    private updateError;\r\n    private endSubscription;\r\n}\r\nexport default Subscription;\r\n"}}
