{"map":"{\"version\":3,\"file\":\"hoc-utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/hoc-utils.tsx\"],\"names\":[],\"mappings\":\";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,IAAM,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAGvC,OAAO,EAAE,YAAY,EAAuB,MAAM,UAAU,CAAC;AAE7D,MAAM,CAAC,IAAM,wBAAwB,GAAG,cAAM,OAAA,CAAC,EAAE,CAAC,EAAJ,CAAI,CAAC;AACnD,MAAM,CAAC,IAAM,uBAAuB,GAAuB,UAAA,KAAK,IAAI,OAAA,KAAK,EAAL,CAAK,CAAC;AAC1E,MAAM,CAAC,IAAM,qBAAqB,GAAG,cAAM,OAAA,KAAK,EAAL,CAAK,CAAC;AAEjD,MAAM,UAAU,cAAc,CAAI,gBAAwC;IACxE,OAAO,gBAAgB,CAAC,WAAW,IAAI,gBAAgB,CAAC,IAAI,IAAI,WAAW,CAAC;AAC9E,CAAC;AAED,MAAM,UAAU,2BAA2B,CACzC,SAA8B,EAC9B,KAAa,EACb,kBAA0B,EAC1B,WAAmB;IAEnB,IAAI,SAAS,GAAuB,EAAE,CAAC;IACvC,KAA+B,UAAmB,EAAnB,KAAA,SAAS,CAAC,SAAS,EAAnB,cAAmB,EAAnB,IAAmB,EAAE;QAA3C,IAAA,WAAkB,EAAhB,sBAAQ,EAAE,cAAI;QACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK;YAAE,SAAS;QAErD,IAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;QACzC,IAAM,YAAY,GAAI,KAAa,CAAC,YAAY,CAAC,CAAC;QAElD,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;YACvC,SAAS,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;YACvC,SAAS;SACV;QAGD,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,EAAE;YAC/B,SAAS,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;YAC/B,SAAS;SACV;QAED,IAAI,SAAS,CAAC,IAAI,KAAK,YAAY,CAAC,QAAQ;YAAE,OAAO;QACrD,SAAS,CACP,OAAO,YAAY,KAAK,WAAW,EACnC,oBAAkB,SAAS,CAAC,IAAI,oBAAe,WAAW,OAAI;aAC5D,+BAA6B,QAAQ,CAAC,IAAI,CAAC,KAAK,yCAAsC,CAAA;aACtF,gBAAc,kBAAkB,MAAG,CAAA,CACtC,CAAC;KACH;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAKD;IAAoE,uCAGnE;IAKC,qBAAY,KAAa;QAAzB,YACE,kBAAM,KAAK,CAAC,SAEb;QAPM,aAAO,GAAY,KAAK,CAAC;QAM9B,KAAI,CAAC,kBAAkB,GAAG,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IAC/D,CAAC;IAED,wCAAkB,GAAlB;QACE,SAAS,CACP,IAAI,CAAC,OAAO,EACZ,sDAAsD,GAAG,kCAAkC,CAC5F,CAAC;QAEF,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,wCAAkB,GAAlB,UAAmB,GAAsC;QACvD,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;IAC7B,CAAC;IACH,kBAAC;AAAD,CAAC,AAzBD,CAAoE,KAAK,CAAC,SAAS,GAyBlF\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from 'react';\r\nvar invariant = require('invariant');\r\nimport { DocumentType } from './parser';\r\nexport var defaultMapPropsToOptions = function () { return ({}); };\r\nexport var defaultMapResultToProps = function (props) { return props; };\r\nexport var defaultMapPropsToSkip = function () { return false; };\r\nexport function getDisplayName(WrappedComponent) {\r\n    return WrappedComponent.displayName || WrappedComponent.name || 'Component';\r\n}\r\nexport function calculateVariablesFromProps(operation, props, graphQLDisplayName, wrapperName) {\r\n    var variables = {};\r\n    for (var _i = 0, _a = operation.variables; _i < _a.length; _i++) {\r\n        var _b = _a[_i], variable = _b.variable, type = _b.type;\r\n        if (!variable.name || !variable.name.value)\r\n            continue;\r\n        var variableName = variable.name.value;\r\n        var variableProp = props[variableName];\r\n        if (typeof variableProp !== 'undefined') {\r\n            variables[variableName] = variableProp;\r\n            continue;\r\n        }\r\n        if (type.kind !== 'NonNullType') {\r\n            variables[variableName] = null;\r\n            continue;\r\n        }\r\n        if (operation.type === DocumentType.Mutation)\r\n            return;\r\n        invariant(typeof variableProp !== 'undefined', \"The operation '\" + operation.name + \"' wrapping '\" + wrapperName + \"' \" +\r\n            (\"is expecting a variable: '\" + variable.name.value + \"' but it was not found in the props \") +\r\n            (\"passed to '\" + graphQLDisplayName + \"'\"));\r\n    }\r\n    return variables;\r\n}\r\nvar GraphQLBase = (function (_super) {\r\n    tslib_1.__extends(GraphQLBase, _super);\r\n    function GraphQLBase(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.withRef = false;\r\n        _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\r\n        return _this;\r\n    }\r\n    GraphQLBase.prototype.getWrappedInstance = function () {\r\n        invariant(this.withRef, \"To access the wrapped instance, you need to specify \" + \"{ withRef: true } in the options\");\r\n        return this.wrappedInstance;\r\n    };\r\n    GraphQLBase.prototype.setWrappedInstance = function (ref) {\r\n        this.wrappedInstance = ref;\r\n    };\r\n    return GraphQLBase;\r\n}(React.Component));\r\nexport { GraphQLBase };\r\n//# sourceMappingURL=hoc-utils.js.map","dts":{"name":"/Users/jovi/Documents/SideProjects/react-apollo/src/hoc-utils.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport { OperationVariables } from './types';\r\nimport { IDocumentDefinition } from './parser';\r\nexport declare const defaultMapPropsToOptions: () => {};\r\nexport declare const defaultMapResultToProps: <P>(props: P) => P;\r\nexport declare const defaultMapPropsToSkip: () => boolean;\r\nexport declare function getDisplayName<P>(WrappedComponent: React.ComponentType<P>): string;\r\nexport declare function calculateVariablesFromProps<TProps>(operation: IDocumentDefinition, props: TProps, graphQLDisplayName: string, wrapperName: string): OperationVariables | undefined;\r\nexport declare type RefSetter<TChildProps> = (ref: React.ComponentClass<TChildProps>) => void | void;\r\nexport declare class GraphQLBase<TProps, TChildProps, TState = any> extends React.Component<TProps, TState> {\r\n    withRef: boolean;\r\n    private wrappedInstance?;\r\n    constructor(props: TProps);\r\n    getWrappedInstance(): React.ComponentClass<TChildProps, any> | undefined;\r\n    setWrappedInstance(ref: React.ComponentClass<TChildProps>): void;\r\n}\r\n"}}
