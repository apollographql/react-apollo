{"map":"{\"version\":3,\"file\":\"test-utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/test-utils.tsx\"],\"names\":[],\"mappings\":\";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,YAAY,MAAM,eAAe,CAAC;AAEzC,OAAO,EAAE,aAAa,IAAI,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAE/D,OAAO,EAAE,cAAc,EAAE,MAAM,SAAS,CAAC;AACzC,OAAO,EAAkB,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExD,cAAc,cAAc,CAAC;AAa7B;IAAoC,0CAAyD;IAK3F,wBAAY,KAA0B;QAAtC,YACE,kBAAM,KAAK,CAAC,SAUb;QARO,IAAA,gBAA0D,EAAxD,gBAAK,EAAE,4BAAW,EAAE,kCAAc,EAAE,gBAAoB,CAAC;QACjE,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC;YAC9B,KAAK,EAAE,KAAK,IAAI,IAAI,KAAK,CAAC,EAAE,WAAW,aAAA,EAAE,CAAC;YAC1C,cAAc,gBAAA;YACd,IAAI,EAAE,IAAI,QAAQ,CAAC,KAAK,IAAI,EAAE,EAAE,WAAW,CAAC;SAC7C,CAAC,CAAC;QAEH,KAAI,CAAC,KAAK,GAAG,EAAE,MAAM,QAAA,EAAE,CAAC;;IAC1B,CAAC;IAEM,+BAAM,GAAb;QACE,OAAO,oBAAC,cAAc,IAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,IAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAkB,CAAC;IAC3F,CAAC;IAEM,6CAAoB,GAA3B;QACE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,EAAE;YACnC,OAAO;SACR;QACD,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC;QAC3D,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,UAAA,OAAO;YACtD,SAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,UAAC,QAAa;YAC3D,SAAS,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC;IAhCa,2BAAY,GAAwB;QAChD,WAAW,EAAE,IAAI;KAClB,CAAC;IA+BJ,qBAAC;CAAA,AAlCD,CAAoC,KAAK,CAAC,SAAS,GAkClD;SAlCY,cAAc\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from 'react';\r\nimport ApolloClient from 'apollo-client';\r\nimport { InMemoryCache as Cache } from 'apollo-cache-inmemory';\r\nimport { ApolloProvider } from './index';\r\nimport { MockLink } from './test-links';\r\nexport * from './test-links';\r\nvar MockedProvider = (function (_super) {\r\n    tslib_1.__extends(MockedProvider, _super);\r\n    function MockedProvider(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        var _a = _this.props, mocks = _a.mocks, addTypename = _a.addTypename, defaultOptions = _a.defaultOptions, cache = _a.cache;\r\n        var client = new ApolloClient({\r\n            cache: cache || new Cache({ addTypename: addTypename }),\r\n            defaultOptions: defaultOptions,\r\n            link: new MockLink(mocks || [], addTypename),\r\n        });\r\n        _this.state = { client: client };\r\n        return _this;\r\n    }\r\n    MockedProvider.prototype.render = function () {\r\n        return React.createElement(ApolloProvider, { client: this.state.client }, this.props.children);\r\n    };\r\n    MockedProvider.prototype.componentWillUnmount = function () {\r\n        if (!this.state.client.queryManager) {\r\n            return;\r\n        }\r\n        var scheduler = this.state.client.queryManager.scheduler;\r\n        Object.keys(scheduler.registeredQueries).forEach(function (queryId) {\r\n            scheduler.stopPollingQuery(queryId);\r\n        });\r\n        Object.keys(scheduler.intervalQueries).forEach(function (interval) {\r\n            scheduler.fetchQueriesOnInterval(interval);\r\n        });\r\n    };\r\n    MockedProvider.defaultProps = {\r\n        addTypename: true,\r\n    };\r\n    return MockedProvider;\r\n}(React.Component));\r\nexport { MockedProvider };\r\n//# sourceMappingURL=test-utils.js.map","dts":{"name":"/Users/jovi/Documents/SideProjects/react-apollo/src/test-utils.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport ApolloClient from 'apollo-client';\r\nimport { DefaultOptions } from 'apollo-client/ApolloClient';\r\nimport { MockedResponse } from './test-links';\r\nimport { ApolloCache } from 'apollo-cache';\r\nexport * from './test-links';\r\nexport interface MockedProviderProps<TSerializedCache = {}> {\r\n    mocks?: ReadonlyArray<MockedResponse>;\r\n    addTypename?: boolean;\r\n    defaultOptions?: DefaultOptions;\r\n    cache?: ApolloCache<TSerializedCache>;\r\n}\r\nexport interface MockedProviderState {\r\n    client: ApolloClient<any>;\r\n}\r\nexport declare class MockedProvider extends React.Component<MockedProviderProps, MockedProviderState> {\r\n    static defaultProps: MockedProviderProps;\r\n    constructor(props: MockedProviderProps);\r\n    render(): JSX.Element;\r\n    componentWillUnmount(): void;\r\n}\r\n"}}
