{"map":"{\"version\":3,\"file\":\"withApollo.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/withApollo.tsx\"],\"names\":[],\"mappings\":\";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAG9C,IAAM,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACvC,IAAM,oBAAoB,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;AAEhE,SAAS,cAAc,CAAI,gBAAwC;IACjE,OAAO,gBAAgB,CAAC,WAAW,IAAI,gBAAgB,CAAC,IAAI,IAAI,WAAW,CAAC;AAC9E,CAAC;AAID,MAAM,CAAC,OAAO,UAAU,UAAU,CAChC,gBAA+D,EAC/D,gBAAuD;IAAvD,iCAAA,EAAA,qBAAuD;IAEvD,IAAM,eAAe,GAAG,gBAAc,cAAc,CAAC,gBAAgB,CAAC,MAAG,CAAC;IAE1E;QAAyB,sCAAuB;QAO9C,oBAAY,KAAa;YAAzB,YACE,kBAAM,KAAK,CAAC,SAEb;YADC,KAAI,CAAC,kBAAkB,GAAG,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;QAC/D,CAAC;QAED,uCAAkB,GAAlB;YACE,SAAS,CACP,gBAAgB,CAAC,OAAO,EACxB,sDAAsD,GAAG,kCAAkC,CAC5F,CAAC;YAEF,OAAO,IAAI,CAAC,eAAe,CAAC;QAC9B,CAAC;QAED,uCAAkB,GAAlB,UAAmB,GAAkD;YACnE,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;QAC7B,CAAC;QAED,2BAAM,GAAN;YAAA,iBAYC;YAXC,OAAO,CACL,oBAAC,cAAc,QACZ,UAAA,MAAM;gBACL,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAI,CAAC,KAAK,EAAE;oBAC1C,MAAM,QAAA;oBACN,GAAG,EAAE,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,SAAS;iBACpE,CAAC,CAAC;gBACH,OAAO,oBAAC,gBAAgB,uBAAK,KAAK,EAAI,CAAC;YACzC,CAAC,CACc,CAClB,CAAC;QACJ,CAAC;QApCM,sBAAW,GAAG,eAAe,CAAC;QAC9B,2BAAgB,GAAG,gBAAgB,CAAC;QAoC7C,iBAAC;KAAA,AAtCD,CAAyB,KAAK,CAAC,SAAS,GAsCvC;IAGD,OAAO,oBAAoB,CAAC,UAAU,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;AAChE,CAAC\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from 'react';\r\nimport ApolloConsumer from './ApolloConsumer';\r\nvar invariant = require('invariant');\r\nvar hoistNonReactStatics = require('hoist-non-react-statics');\r\nfunction getDisplayName(WrappedComponent) {\r\n    return WrappedComponent.displayName || WrappedComponent.name || 'Component';\r\n}\r\nexport default function withApollo(WrappedComponent, operationOptions) {\r\n    if (operationOptions === void 0) { operationOptions = {}; }\r\n    var withDisplayName = \"withApollo(\" + getDisplayName(WrappedComponent) + \")\";\r\n    var WithApollo = (function (_super) {\r\n        tslib_1.__extends(WithApollo, _super);\r\n        function WithApollo(props) {\r\n            var _this = _super.call(this, props) || this;\r\n            _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\r\n            return _this;\r\n        }\r\n        WithApollo.prototype.getWrappedInstance = function () {\r\n            invariant(operationOptions.withRef, \"To access the wrapped instance, you need to specify \" + \"{ withRef: true } in the options\");\r\n            return this.wrappedInstance;\r\n        };\r\n        WithApollo.prototype.setWrappedInstance = function (ref) {\r\n            this.wrappedInstance = ref;\r\n        };\r\n        WithApollo.prototype.render = function () {\r\n            var _this = this;\r\n            return (React.createElement(ApolloConsumer, null, function (client) {\r\n                var props = Object.assign({}, _this.props, {\r\n                    client: client,\r\n                    ref: operationOptions.withRef ? _this.setWrappedInstance : undefined,\r\n                });\r\n                return React.createElement(WrappedComponent, tslib_1.__assign({}, props));\r\n            }));\r\n        };\r\n        WithApollo.displayName = withDisplayName;\r\n        WithApollo.WrappedComponent = WrappedComponent;\r\n        return WithApollo;\r\n    }(React.Component));\r\n    return hoistNonReactStatics(WithApollo, WrappedComponent, {});\r\n}\r\n//# sourceMappingURL=withApollo.js.map","dts":{"name":"/Users/jovi/Documents/SideProjects/react-apollo/src/withApollo.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport { OperationOption } from './types';\r\nimport { ApolloClient } from 'apollo-client';\r\nexport declare type WithApolloClient<P> = P & {\r\n    client: ApolloClient<any>;\r\n};\r\nexport default function withApollo<TProps, TResult = any>(WrappedComponent: React.ComponentType<WithApolloClient<TProps>>, operationOptions?: OperationOption<TProps, TResult>): React.ComponentClass<TProps>;\r\n"}}
