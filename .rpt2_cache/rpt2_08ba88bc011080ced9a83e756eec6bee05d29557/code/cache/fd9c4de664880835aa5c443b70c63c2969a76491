{"map":"{\"version\":3,\"file\":\"test-links.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/test-links.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport { ApolloLink, Observable, } from 'apollo-link';\r\nimport { print } from 'graphql/language/printer';\r\nimport { addTypenameToDocument } from 'apollo-utilities';\r\nvar isEqual = require('lodash.isequal');\r\nvar MockLink = (function (_super) {\r\n    tslib_1.__extends(MockLink, _super);\r\n    function MockLink(mockedResponses, addTypename) {\r\n        if (addTypename === void 0) { addTypename = true; }\r\n        var _this = _super.call(this) || this;\r\n        _this.addTypename = true;\r\n        _this.mockedResponsesByKey = {};\r\n        _this.addTypename = addTypename;\r\n        if (mockedResponses)\r\n            mockedResponses.forEach(function (mockedResponse) {\r\n                _this.addMockedResponse(mockedResponse);\r\n            });\r\n        return _this;\r\n    }\r\n    MockLink.prototype.addMockedResponse = function (mockedResponse) {\r\n        var key = requestToKey(mockedResponse.request, this.addTypename);\r\n        var mockedResponses = this.mockedResponsesByKey[key];\r\n        if (!mockedResponses) {\r\n            mockedResponses = [];\r\n            this.mockedResponsesByKey[key] = mockedResponses;\r\n        }\r\n        mockedResponses.push(mockedResponse);\r\n    };\r\n    MockLink.prototype.request = function (operation) {\r\n        var key = requestToKey(operation, this.addTypename);\r\n        var responseIndex;\r\n        var response = (this.mockedResponsesByKey[key] || []).find(function (res, index) {\r\n            var requestVariables = operation.variables || {};\r\n            var mockedResponseVariables = res.request.variables || {};\r\n            if (!isEqual(requestVariables, mockedResponseVariables)) {\r\n                return false;\r\n            }\r\n            responseIndex = index;\r\n            return true;\r\n        });\r\n        if (!response || typeof responseIndex === 'undefined') {\r\n            throw new Error(\"No more mocked responses for the query: \" + print(operation.query) + \", variables: \" + JSON.stringify(operation.variables));\r\n        }\r\n        this.mockedResponsesByKey[key].splice(responseIndex, 1);\r\n        var result = response.result, error = response.error, delay = response.delay, newData = response.newData;\r\n        if (newData) {\r\n            response.result = newData();\r\n            this.mockedResponsesByKey[key].push(response);\r\n        }\r\n        if (!result && !error) {\r\n            throw new Error(\"Mocked response should contain either result or error: \" + key);\r\n        }\r\n        return new Observable(function (observer) {\r\n            var timer = setTimeout(function () {\r\n                if (error) {\r\n                    observer.error(error);\r\n                }\r\n                else {\r\n                    if (result)\r\n                        observer.next(result);\r\n                    observer.complete();\r\n                }\r\n            }, delay ? delay : 0);\r\n            return function () {\r\n                clearTimeout(timer);\r\n            };\r\n        });\r\n    };\r\n    return MockLink;\r\n}(ApolloLink));\r\nexport { MockLink };\r\nvar MockSubscriptionLink = (function (_super) {\r\n    tslib_1.__extends(MockSubscriptionLink, _super);\r\n    function MockSubscriptionLink() {\r\n        var _this = _super.call(this) || this;\r\n        _this.unsubscribers = [];\r\n        _this.setups = [];\r\n        return _this;\r\n    }\r\n    MockSubscriptionLink.prototype.request = function (_req) {\r\n        var _this = this;\r\n        return new Observable(function (observer) {\r\n            _this.setups.forEach(function (x) { return x(); });\r\n            _this.observer = observer;\r\n            return function () {\r\n                _this.unsubscribers.forEach(function (x) { return x(); });\r\n            };\r\n        });\r\n    };\r\n    MockSubscriptionLink.prototype.simulateResult = function (result) {\r\n        var _this = this;\r\n        setTimeout(function () {\r\n            var observer = _this.observer;\r\n            if (!observer)\r\n                throw new Error('subscription torn down');\r\n            if (result.result && observer.next)\r\n                observer.next(result.result);\r\n            if (result.error && observer.error)\r\n                observer.error(result.error);\r\n        }, result.delay || 0);\r\n    };\r\n    MockSubscriptionLink.prototype.onSetup = function (listener) {\r\n        this.setups = this.setups.concat([listener]);\r\n    };\r\n    MockSubscriptionLink.prototype.onUnsubscribe = function (listener) {\r\n        this.unsubscribers = this.unsubscribers.concat([listener]);\r\n    };\r\n    return MockSubscriptionLink;\r\n}(ApolloLink));\r\nexport { MockSubscriptionLink };\r\nfunction requestToKey(request, addTypename) {\r\n    var queryString = request.query && print(addTypename ? addTypenameToDocument(request.query) : request.query);\r\n    var requestKey = { query: queryString };\r\n    return JSON.stringify(requestKey);\r\n}\r\nexport function mockSingleLink() {\r\n    var mockedResponses = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        mockedResponses[_i] = arguments[_i];\r\n    }\r\n    var maybeTypename = mockedResponses[mockedResponses.length - 1];\r\n    var mocks = mockedResponses.slice(0, mockedResponses.length - 1);\r\n    if (typeof maybeTypename !== 'boolean') {\r\n        mocks = mockedResponses;\r\n        maybeTypename = true;\r\n    }\r\n    return new MockLink(mocks, maybeTypename);\r\n}\r\nexport function mockObservableLink() {\r\n    return new MockSubscriptionLink();\r\n}\r\n//# sourceMappingURL=test-links.js.map","dts":{"name":"/Users/jovi/Documents/SideProjects/react-apollo/src/test-links.d.ts","writeByteOrderMark":false,"text":"import { Operation, GraphQLRequest, ApolloLink, FetchResult, Observable } from 'apollo-link';\r\nexport interface MockedResponse {\r\n    request: GraphQLRequest;\r\n    result?: FetchResult;\r\n    error?: Error;\r\n    delay?: number;\r\n    newData?: () => FetchResult;\r\n}\r\nexport interface MockedSubscriptionResult {\r\n    result?: FetchResult;\r\n    error?: Error;\r\n    delay?: number;\r\n}\r\nexport interface MockedSubscription {\r\n    request: GraphQLRequest;\r\n}\r\nexport declare class MockLink extends ApolloLink {\r\n    addTypename: Boolean;\r\n    private mockedResponsesByKey;\r\n    constructor(mockedResponses: ReadonlyArray<MockedResponse>, addTypename?: Boolean);\r\n    addMockedResponse(mockedResponse: MockedResponse): void;\r\n    request(operation: Operation): Observable<FetchResult<Record<string, any>, Record<string, any>>>;\r\n}\r\nexport declare class MockSubscriptionLink extends ApolloLink {\r\n    unsubscribers: any[];\r\n    setups: any[];\r\n    private observer;\r\n    constructor();\r\n    request(_req: any): Observable<FetchResult<Record<string, any>, Record<string, any>>>;\r\n    simulateResult(result: MockedSubscriptionResult): void;\r\n    onSetup(listener: any): void;\r\n    onUnsubscribe(listener: any): void;\r\n}\r\nexport declare function mockSingleLink(...mockedResponses: Array<any>): ApolloLink;\r\nexport declare function mockObservableLink(): MockSubscriptionLink;\r\n"}}
