{"map":"{\"version\":3,\"file\":\"parser.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/parser.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"var invariant = require('invariant');\r\nexport var DocumentType;\r\n(function (DocumentType) {\r\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\r\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\r\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\r\n})(DocumentType || (DocumentType = {}));\r\nvar cache = new Map();\r\nexport function parser(document) {\r\n    var cached = cache.get(document);\r\n    if (cached)\r\n        return cached;\r\n    var variables, type, name;\r\n    invariant(!!document && !!document.kind, \"Argument of \" + document + \" passed to parser was not a valid GraphQL \" +\r\n        \"DocumentNode. You may need to use 'graphql-tag' or another method \" +\r\n        \"to convert your operation into a document\");\r\n    var fragments = document.definitions.filter(function (x) { return x.kind === 'FragmentDefinition'; });\r\n    var queries = document.definitions.filter(function (x) { return x.kind === 'OperationDefinition' && x.operation === 'query'; });\r\n    var mutations = document.definitions.filter(function (x) { return x.kind === 'OperationDefinition' && x.operation === 'mutation'; });\r\n    var subscriptions = document.definitions.filter(function (x) { return x.kind === 'OperationDefinition' && x.operation === 'subscription'; });\r\n    invariant(!fragments.length || (queries.length || mutations.length || subscriptions.length), \"Passing only a fragment to 'graphql' is not yet supported. \" +\r\n        \"You must include a query, subscription or mutation as well\");\r\n    invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" +\r\n        (document + \" had \" + queries.length + \" queries, \" + subscriptions.length + \" \") +\r\n        (\"subscriptions and \" + mutations.length + \" mutations. \") +\r\n        \"You can use 'compose' to join multiple operation types to a component\");\r\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\r\n    if (!queries.length && !mutations.length)\r\n        type = DocumentType.Subscription;\r\n    var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\r\n    invariant(definitions.length === 1, \"react-apollo only supports one defintion per HOC. \" + document + \" had \" +\r\n        (definitions.length + \" definitions. \") +\r\n        \"You can use 'compose' to join multiple operation types to a component\");\r\n    var definition = definitions[0];\r\n    variables = definition.variableDefinitions || [];\r\n    if (definition.name && definition.name.kind === 'Name') {\r\n        name = definition.name.value;\r\n    }\r\n    else {\r\n        name = 'data';\r\n    }\r\n    var payload = { name: name, type: type, variables: variables };\r\n    cache.set(document, payload);\r\n    return payload;\r\n}\r\n//# sourceMappingURL=parser.js.map","dts":{"name":"/Users/jovi/Documents/SideProjects/react-apollo/src/parser.d.ts","writeByteOrderMark":false,"text":"import { DocumentNode, VariableDefinitionNode } from 'graphql';\r\nexport declare enum DocumentType {\r\n    Query = 0,\r\n    Mutation = 1,\r\n    Subscription = 2\r\n}\r\nexport interface IDocumentDefinition {\r\n    type: DocumentType;\r\n    name: string;\r\n    variables: ReadonlyArray<VariableDefinitionNode>;\r\n}\r\nexport declare function parser(document: DocumentNode): IDocumentDefinition;\r\n"}}
