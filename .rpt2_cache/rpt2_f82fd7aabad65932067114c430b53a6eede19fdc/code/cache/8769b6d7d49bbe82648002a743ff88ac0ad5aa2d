{"map":"{\"version\":3,\"file\":\"graphql.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/graphql.tsx\"],\"names\":[],\"mappings\":\"AAEA,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AAGhD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAEtD,MAAM,UAAU,OAAO,CAOrB,QAAsB,EACtB,gBAAqF;IAArF,iCAAA,EAAA,qBAAqF;IAErF,QAAQ,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE;QAC7B,KAAK,YAAY,CAAC,QAAQ;YACxB,OAAO,YAAY,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAClD,KAAK,YAAY,CAAC,YAAY;YAC5B,OAAO,gBAAgB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAGtD,KAAK,YAAY,CAAC,KAAK,CAAC;QACxB;YACE,OAAO,SAAS,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;KAChD;AACH,CAAC\"}","code":"import { parser, DocumentType } from './parser';\r\nimport { withQuery } from './query-hoc';\r\nimport { withMutation } from './mutation-hoc';\r\nimport { withSubscription } from './subscription-hoc';\r\nexport function graphql(document, operationOptions) {\r\n    if (operationOptions === void 0) { operationOptions = {}; }\r\n    switch (parser(document).type) {\r\n        case DocumentType.Mutation:\r\n            return withMutation(document, operationOptions);\r\n        case DocumentType.Subscription:\r\n            return withSubscription(document, operationOptions);\r\n        case DocumentType.Query:\r\n        default:\r\n            return withQuery(document, operationOptions);\r\n    }\r\n}\r\n//# sourceMappingURL=graphql.js.map","dts":{"name":"/Users/jovi/Documents/SideProjects/react-apollo/src/graphql.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport { DocumentNode } from 'graphql';\r\nimport { OperationOption, DataProps, MutateProps } from './types';\r\nexport declare function graphql<TProps extends TGraphQLVariables | {} = {}, TData = {}, TGraphQLVariables = {}, TChildProps = Partial<DataProps<TData, TGraphQLVariables>> & Partial<MutateProps<TData, TGraphQLVariables>>>(document: DocumentNode, operationOptions?: OperationOption<TProps, TData, TGraphQLVariables, TChildProps>): (WrappedComponent: React.ComponentType<TChildProps & TProps>) => React.ComponentClass<TProps, any>;\r\n"}}
