{"map":"{\"version\":3,\"file\":\"Query.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/Query.tsx\"],\"names\":[],\"mappings\":\"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\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport { ApolloError, NetworkStatus, } from 'apollo-client';\r\nimport { parser, DocumentType } from './parser';\r\nimport { getClient } from './component-utils';\r\nvar shallowEqual = require('fbjs/lib/shallowEqual');\r\nvar invariant = require('invariant');\r\nfunction compact(obj) {\r\n    return Object.keys(obj).reduce(function (acc, key) {\r\n        if (obj[key] !== undefined) {\r\n            acc[key] = obj[key];\r\n        }\r\n        return acc;\r\n    }, {});\r\n}\r\nfunction observableQueryFields(observable) {\r\n    var fields = {\r\n        variables: observable.variables,\r\n        refetch: observable.refetch.bind(observable),\r\n        fetchMore: observable.fetchMore.bind(observable),\r\n        updateQuery: observable.updateQuery.bind(observable),\r\n        startPolling: observable.startPolling.bind(observable),\r\n        stopPolling: observable.stopPolling.bind(observable),\r\n        subscribeToMore: observable.subscribeToMore.bind(observable),\r\n    };\r\n    return fields;\r\n}\r\nvar Query = (function (_super) {\r\n    tslib_1.__extends(Query, _super);\r\n    function Query(props, context) {\r\n        var _this = _super.call(this, props, context) || this;\r\n        _this.previousData = {};\r\n        _this.hasMounted = false;\r\n        _this.startQuerySubscription = function () {\r\n            if (_this.querySubscription)\r\n                return;\r\n            var initial = _this.getQueryResult();\r\n            _this.querySubscription = _this.queryObservable.subscribe({\r\n                next: function (_a) {\r\n                    var data = _a.data;\r\n                    if (initial && initial.networkStatus === 7 && shallowEqual(initial.data, data)) {\r\n                        initial = undefined;\r\n                        return;\r\n                    }\r\n                    initial = undefined;\r\n                    _this.updateCurrentData();\r\n                },\r\n                error: function (error) {\r\n                    _this.resubscribeToQuery();\r\n                    if (!error.hasOwnProperty('graphQLErrors'))\r\n                        throw error;\r\n                    _this.updateCurrentData();\r\n                },\r\n            });\r\n        };\r\n        _this.removeQuerySubscription = function () {\r\n            if (_this.querySubscription) {\r\n                _this.querySubscription.unsubscribe();\r\n                delete _this.querySubscription;\r\n            }\r\n        };\r\n        _this.updateCurrentData = function () {\r\n            if (_this.hasMounted)\r\n                _this.forceUpdate();\r\n        };\r\n        _this.getQueryResult = function () {\r\n            var data = { data: Object.create(null) };\r\n            Object.assign(data, observableQueryFields(_this.queryObservable));\r\n            if (_this.props.skip) {\r\n                data = tslib_1.__assign({}, data, { data: undefined, error: undefined, loading: false });\r\n            }\r\n            else {\r\n                var currentResult = _this.queryObservable.currentResult();\r\n                var loading = currentResult.loading, partial = currentResult.partial, networkStatus = currentResult.networkStatus, errors = currentResult.errors;\r\n                var error = currentResult.error;\r\n                if (errors && errors.length > 0) {\r\n                    error = new ApolloError({ graphQLErrors: errors });\r\n                }\r\n                Object.assign(data, { loading: loading, networkStatus: networkStatus, error: error });\r\n                if (loading) {\r\n                    Object.assign(data.data, _this.previousData, currentResult.data);\r\n                }\r\n                else if (error) {\r\n                    Object.assign(data, {\r\n                        data: (_this.queryObservable.getLastResult() || {}).data,\r\n                    });\r\n                }\r\n                else {\r\n                    var fetchPolicy = _this.queryObservable.options.fetchPolicy;\r\n                    var partialRefetch = _this.props.partialRefetch;\r\n                    if (partialRefetch &&\r\n                        Object.keys(currentResult.data).length === 0 &&\r\n                        partial &&\r\n                        fetchPolicy !== 'cache-only') {\r\n                        Object.assign(data, { loading: true, networkStatus: NetworkStatus.loading });\r\n                        data.refetch();\r\n                        return data;\r\n                    }\r\n                    Object.assign(data.data, currentResult.data);\r\n                    _this.previousData = currentResult.data;\r\n                }\r\n            }\r\n            if (!_this.querySubscription) {\r\n                var oldRefetch_1 = data.refetch;\r\n                data.refetch = function (args) {\r\n                    if (_this.querySubscription) {\r\n                        return oldRefetch_1(args);\r\n                    }\r\n                    else {\r\n                        return new Promise(function (r, f) {\r\n                            _this.refetcherQueue = { resolve: r, reject: f, args: args };\r\n                        });\r\n                    }\r\n                };\r\n            }\r\n            data.client = _this.client;\r\n            return data;\r\n        };\r\n        _this.client = getClient(props, context);\r\n        _this.initializeQueryObservable(props);\r\n        return _this;\r\n    }\r\n    Query.prototype.fetchData = function () {\r\n        if (this.props.skip)\r\n            return false;\r\n        var _a = this.props, children = _a.children, ssr = _a.ssr, displayName = _a.displayName, skip = _a.skip, client = _a.client, onCompleted = _a.onCompleted, onError = _a.onError, partialRefetch = _a.partialRefetch, opts = tslib_1.__rest(_a, [\"children\", \"ssr\", \"displayName\", \"skip\", \"client\", \"onCompleted\", \"onError\", \"partialRefetch\"]);\r\n        var fetchPolicy = opts.fetchPolicy;\r\n        if (ssr === false)\r\n            return false;\r\n        if (fetchPolicy === 'network-only' || fetchPolicy === 'cache-and-network') {\r\n            fetchPolicy = 'cache-first';\r\n        }\r\n        var observable = this.client.watchQuery(tslib_1.__assign({}, opts, { fetchPolicy: fetchPolicy }));\r\n        var result = this.queryObservable.currentResult();\r\n        return result.loading ? observable.result() : false;\r\n    };\r\n    Query.prototype.componentDidMount = function () {\r\n        this.hasMounted = true;\r\n        if (this.props.skip)\r\n            return;\r\n        this.startQuerySubscription();\r\n        if (this.refetcherQueue) {\r\n            var _a = this.refetcherQueue, args = _a.args, resolve = _a.resolve, reject = _a.reject;\r\n            this.queryObservable.refetch(args)\r\n                .then(resolve)\r\n                .catch(reject);\r\n        }\r\n    };\r\n    Query.prototype.componentWillReceiveProps = function (nextProps, nextContext) {\r\n        if (nextProps.skip && !this.props.skip) {\r\n            this.removeQuerySubscription();\r\n            return;\r\n        }\r\n        var nextClient = getClient(nextProps, nextContext);\r\n        if (shallowEqual(this.props, nextProps) && this.client === nextClient) {\r\n            return;\r\n        }\r\n        if (this.client !== nextClient) {\r\n            this.client = nextClient;\r\n            this.removeQuerySubscription();\r\n            this.queryObservable = null;\r\n            this.previousData = {};\r\n            this.updateQuery(nextProps);\r\n        }\r\n        if (this.props.query !== nextProps.query) {\r\n            this.removeQuerySubscription();\r\n        }\r\n        this.updateQuery(nextProps);\r\n        if (nextProps.skip)\r\n            return;\r\n        this.startQuerySubscription();\r\n    };\r\n    Query.prototype.componentWillUnmount = function () {\r\n        this.removeQuerySubscription();\r\n        this.hasMounted = false;\r\n    };\r\n    Query.prototype.componentDidUpdate = function () {\r\n        var _a = this.props, onCompleted = _a.onCompleted, onError = _a.onError;\r\n        if (onCompleted || onError) {\r\n            var currentResult = this.queryObservable.currentResult();\r\n            var loading = currentResult.loading, error = currentResult.error, data = currentResult.data;\r\n            if (onCompleted && !loading && !error) {\r\n                onCompleted(data);\r\n            }\r\n            else if (onError && !loading && error) {\r\n                onError(error);\r\n            }\r\n        }\r\n    };\r\n    Query.prototype.render = function () {\r\n        var _this = this;\r\n        var context = this.context;\r\n        var finish = function () { return _this.props.children(_this.getQueryResult()); };\r\n        if (context && context.renderPromises) {\r\n            return context.renderPromises.addQueryPromise(this, finish);\r\n        }\r\n        return finish();\r\n    };\r\n    Query.prototype.extractOptsFromProps = function (props) {\r\n        var variables = props.variables, pollInterval = props.pollInterval, fetchPolicy = props.fetchPolicy, errorPolicy = props.errorPolicy, notifyOnNetworkStatusChange = props.notifyOnNetworkStatusChange, query = props.query, _a = props.displayName, displayName = _a === void 0 ? 'Query' : _a, _b = props.context, context = _b === void 0 ? {} : _b;\r\n        this.operation = parser(query);\r\n        invariant(this.operation.type === DocumentType.Query, \"The <Query /> component requires a graphql query, but got a \" + (this.operation.type === DocumentType.Mutation ? 'mutation' : 'subscription') + \".\");\r\n        return compact({\r\n            variables: variables,\r\n            pollInterval: pollInterval,\r\n            query: query,\r\n            fetchPolicy: fetchPolicy,\r\n            errorPolicy: errorPolicy,\r\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\r\n            metadata: { reactComponent: { displayName: displayName } },\r\n            context: context,\r\n        });\r\n    };\r\n    Query.prototype.initializeQueryObservable = function (props) {\r\n        var opts = this.extractOptsFromProps(props);\r\n        this.setOperations(opts);\r\n        this.queryObservable = this.client.watchQuery(opts);\r\n    };\r\n    Query.prototype.setOperations = function (props) {\r\n        if (this.context.operations) {\r\n            this.context.operations.set(this.operation.name, {\r\n                query: props.query,\r\n                variables: props.variables,\r\n            });\r\n        }\r\n    };\r\n    Query.prototype.updateQuery = function (props) {\r\n        if (!this.queryObservable) {\r\n            this.initializeQueryObservable(props);\r\n        }\r\n        else {\r\n            this.setOperations(props);\r\n        }\r\n        this.queryObservable.setOptions(this.extractOptsFromProps(props))\r\n            .catch(function () { return null; });\r\n    };\r\n    Query.prototype.resubscribeToQuery = function () {\r\n        this.removeQuerySubscription();\r\n        var lastError = this.queryObservable.getLastError();\r\n        var lastResult = this.queryObservable.getLastResult();\r\n        this.queryObservable.resetLastResults();\r\n        this.startQuerySubscription();\r\n        Object.assign(this.queryObservable, { lastError: lastError, lastResult: lastResult });\r\n    };\r\n    Query.contextTypes = {\r\n        client: PropTypes.object,\r\n        operations: PropTypes.object,\r\n        renderPromises: PropTypes.object,\r\n    };\r\n    Query.propTypes = {\r\n        client: PropTypes.object,\r\n        children: PropTypes.func.isRequired,\r\n        fetchPolicy: PropTypes.string,\r\n        notifyOnNetworkStatusChange: PropTypes.bool,\r\n        onCompleted: PropTypes.func,\r\n        onError: PropTypes.func,\r\n        pollInterval: PropTypes.number,\r\n        query: PropTypes.object.isRequired,\r\n        variables: PropTypes.object,\r\n        ssr: PropTypes.bool,\r\n        partialRefetch: PropTypes.bool,\r\n    };\r\n    return Query;\r\n}(React.Component));\r\nexport default Query;\r\n//# sourceMappingURL=Query.js.map","dts":{"name":"/Users/jovi/Documents/SideProjects/react-apollo/src/Query.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport ApolloClient, { ObservableQuery, ApolloError, ApolloQueryResult, NetworkStatus, FetchMoreOptions, FetchMoreQueryOptions } from 'apollo-client';\r\nimport { DocumentNode } from 'graphql';\r\nimport { OperationVariables, QueryOpts } from './types';\r\nimport { RenderPromises } from './getDataFromTree';\r\nexport declare type ObservableQueryFields<TData, TVariables> = Pick<ObservableQuery<TData, TVariables>, 'startPolling' | 'stopPolling' | 'subscribeToMore' | 'updateQuery' | 'refetch' | 'variables'> & {\r\n    fetchMore: (<K extends keyof TVariables>(fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> & FetchMoreOptions<TData, TVariables>) => Promise<ApolloQueryResult<TData>>) & (<TData2, TVariables2, K extends keyof TVariables2>(fetchMoreOptions: {\r\n        query: DocumentNode;\r\n    } & FetchMoreQueryOptions<TVariables2, K> & FetchMoreOptions<TData2, TVariables2>) => Promise<ApolloQueryResult<TData2>>);\r\n};\r\nexport interface QueryResult<TData = any, TVariables = OperationVariables> extends ObservableQueryFields<TData, TVariables> {\r\n    client: ApolloClient<any>;\r\n    data: TData | undefined;\r\n    error?: ApolloError;\r\n    loading: boolean;\r\n    networkStatus: NetworkStatus;\r\n}\r\nexport interface QueryProps<TData = any, TVariables = OperationVariables> extends QueryOpts<TVariables> {\r\n    children: (result: QueryResult<TData, TVariables>) => React.ReactNode;\r\n    query: DocumentNode;\r\n    displayName?: string;\r\n    skip?: boolean;\r\n    onCompleted?: (data: TData | {}) => void;\r\n    onError?: (error: ApolloError) => void;\r\n}\r\nexport interface QueryContext {\r\n    client?: ApolloClient<Object>;\r\n    operations?: Map<string, {\r\n        query: DocumentNode;\r\n        variables: any;\r\n    }>;\r\n    renderPromises?: RenderPromises;\r\n}\r\nexport default class Query<TData = any, TVariables = OperationVariables> extends React.Component<QueryProps<TData, TVariables>> {\r\n    static contextTypes: {\r\n        client: PropTypes.Requireable<object>;\r\n        operations: PropTypes.Requireable<object>;\r\n        renderPromises: PropTypes.Requireable<object>;\r\n    };\r\n    static propTypes: {\r\n        client: PropTypes.Requireable<object>;\r\n        children: PropTypes.Validator<(...args: any[]) => any>;\r\n        fetchPolicy: PropTypes.Requireable<string>;\r\n        notifyOnNetworkStatusChange: PropTypes.Requireable<boolean>;\r\n        onCompleted: PropTypes.Requireable<(...args: any[]) => any>;\r\n        onError: PropTypes.Requireable<(...args: any[]) => any>;\r\n        pollInterval: PropTypes.Requireable<number>;\r\n        query: PropTypes.Validator<object>;\r\n        variables: PropTypes.Requireable<object>;\r\n        ssr: PropTypes.Requireable<boolean>;\r\n        partialRefetch: PropTypes.Requireable<boolean>;\r\n    };\r\n    context: QueryContext | undefined;\r\n    private client;\r\n    private queryObservable?;\r\n    private querySubscription?;\r\n    private previousData;\r\n    private refetcherQueue?;\r\n    private hasMounted;\r\n    private operation?;\r\n    constructor(props: QueryProps<TData, TVariables>, context: QueryContext);\r\n    fetchData(): Promise<ApolloQueryResult<any>> | boolean;\r\n    componentDidMount(): void;\r\n    componentWillReceiveProps(nextProps: QueryProps<TData, TVariables>, nextContext: QueryContext): void;\r\n    componentWillUnmount(): void;\r\n    componentDidUpdate(): void;\r\n    render(): React.ReactNode;\r\n    private extractOptsFromProps;\r\n    private initializeQueryObservable;\r\n    private setOperations;\r\n    private updateQuery;\r\n    private startQuerySubscription;\r\n    private removeQuerySubscription;\r\n    private resubscribeToQuery;\r\n    private updateCurrentData;\r\n    private getQueryResult;\r\n}\r\n"}}
