{"map":"{\"version\":3,\"file\":\"Mutation.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/Mutation.tsx\"],\"names\":[],\"mappings\":\";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,SAAS,MAAM,YAAY,CAAC;AACxC,OAAqB,EAAoB,WAAW,EAAe,MAAM,eAAe,CAAC;AAEzF,IAAM,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAEvC,IAAM,YAAY,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAGtD,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AAChD,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AA0E9C,IAAM,YAAY,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,MAAM,EAAE,KAAK;IACb,KAAK,EAAE,SAAS;IAChB,IAAI,EAAE,SAAS;CAChB,CAAC;AAEF;IAAqE,oCAGpE;IA2BC,kBAAY,KAAuC,EAAE,OAAY;QAAjE,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SAKtB;QARO,gBAAU,GAAY,KAAK,CAAC;QAoD5B,iBAAW,GAAG,UAAC,OAAgD;YAAhD,wBAAA,EAAA,YAAgD;YACrE,KAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAM,UAAU,GAAG,KAAI,CAAC,qBAAqB,EAAE,CAAC;YAEhD,OAAO,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC;iBACxB,IAAI,CAAC,UAAA,QAAQ;gBACZ,KAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;gBAC/C,OAAO,QAAQ,CAAC;YAClB,CAAC,CAAC;iBACD,KAAK,CAAC,UAAA,CAAC;gBACN,KAAI,CAAC,eAAe,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;gBACpC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO;oBAAE,MAAM,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;QAEM,YAAM,GAAG,UAAC,OAA2C;YACrD,IAAA,gBAQQ,EAPZ,sBAAQ,EACR,wBAAS,EACT,0CAAkB,EAClB,kBAAM,EACN,eAAY,EAAZ,iCAAY,EACZ,2BAA2B,EAA3B,gDAA2B,EAC3B,4BACY,CAAC;YACf,IAAM,aAAa,wBAAQ,OAAO,CAAE,CAAC;YAErC,IAAI,cAAc,GAAG,aAAa,CAAC,cAAc,IAAI,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC;YAS/E,IAAI,cAAc,IAAI,cAAc,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;gBAC5E,cAAc,GAAI,cAAsB,CAAC,GAAG,CAAC,UAAC,CAA4B;oBACxE,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,KAAI,CAAC,OAAO,CAAC,UAAU;wBAClD,OAAO,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;oBAC7C,OAAO,CAAC,CAAC;gBACX,CAAC,CAAC,CAAC;gBACH,OAAO,aAAa,CAAC,cAAc,CAAC;aACrC;YAED,IAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC;YAC9E,OAAO,aAAa,CAAC,SAAS,CAAC;YAE/B,OAAO,KAAI,CAAC,MAAM,CAAC,MAAM,oBACvB,QAAQ,UAAA;gBACR,kBAAkB,oBAAA;gBAClB,cAAc,gBAAA;gBACd,mBAAmB,qBAAA;gBACnB,MAAM,QAAA;gBACN,OAAO,SAAA;gBACP,WAAW,aAAA,EACX,SAAS,EAAE,eAAe,IACvB,aAAa,EAChB,CAAC;QACL,CAAC,CAAC;QAEM,qBAAe,GAAG;YACxB,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,aAAa,EAAE;gBACpD,KAAI,CAAC,QAAQ,CAAC;oBACZ,OAAO,EAAE,IAAI;oBACb,KAAK,EAAE,SAAS;oBAChB,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,IAAI;iBACb,CAAC,CAAC;aACJ;QACH,CAAC,CAAC;QAEM,yBAAmB,GAAG,UAAC,QAAgC,EAAE,UAAkB;YACjF,IAAI,KAAI,CAAC,UAAU,KAAK,KAAK,EAAE;gBAC7B,OAAO;aACR;YACK,IAAA,gBAA2C,EAAzC,4BAAW,EAAE,gCAA4B,CAAC;YAE1C,IAAA,oBAAI,EAAE,wBAAM,CAAc;YAClC,IAAM,KAAK,GACT,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAEvF,IAAM,cAAc,GAAG,cAAM,OAAA,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,IAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAjD,CAAiD,CAAC;YAE/E,IAAI,KAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE;gBAC3D,KAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,MAAA,EAAE,KAAK,OAAA,EAAE,EAAE,cAAc,CAAC,CAAC;aAChE;iBAAM;gBACL,cAAc,EAAE,CAAC;aAClB;QACH,CAAC,CAAC;QAEM,qBAAe,GAAG,UAAC,KAAkB,EAAE,UAAkB;YAC/D,IAAI,KAAI,CAAC,UAAU,KAAK,KAAK,EAAE;gBAC7B,OAAO;aACR;YACO,IAAA,6BAAO,CAAgB;YAC/B,IAAM,WAAW,GAAG,cAAM,OAAA,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAjC,CAAiC,CAAC;YAE5D,IAAI,KAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,EAAE;gBACzC,KAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,OAAA,EAAE,EAAE,WAAW,CAAC,CAAC;aACvD;iBAAM;gBACL,WAAW,EAAE,CAAC;aACf;QACH,CAAC,CAAC;QAEM,2BAAqB,GAAG;YAC9B,KAAI,CAAC,oBAAoB,GAAG,KAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;YAC1D,OAAO,KAAI,CAAC,oBAAoB,CAAC;QACnC,CAAC,CAAC;QAEM,0BAAoB,GAAG,UAAC,UAAkB;YAChD,OAAO,KAAI,CAAC,oBAAoB,KAAK,UAAU,CAAC;QAClD,CAAC,CAAC;QAEM,8BAAwB,GAAG,UAAC,QAAsB;YACxD,IAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;YACnC,SAAS,CACP,SAAS,CAAC,IAAI,KAAK,YAAY,CAAC,QAAQ,EACxC,wEACE,SAAS,CAAC,IAAI,KAAK,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,OAC/D,CACJ,CAAC;QACJ,CAAC,CAAC;QA1KA,KAAI,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxC,KAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC9C,KAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAC9B,KAAI,CAAC,KAAK,GAAG,YAAY,CAAC;;IAC5B,CAAC;IAED,oCAAiB,GAAjB;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,uCAAoB,GAApB;QACE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC1B,CAAC;IAED,4CAAyB,GAAzB,UACE,SAA2C,EAC3C,WAA4B;QAE5B,IAAM,UAAU,GAAG,SAAS,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QACrD,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YACrE,OAAO;SACR;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ,EAAE;YAC9C,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;SACnD;QAED,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YAC9B,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;SAC7B;IACH,CAAC;IAED,yBAAM,GAAN;QACU,IAAA,8BAAQ,CAAgB;QAC1B,IAAA,eAA6C,EAA3C,oBAAO,EAAE,cAAI,EAAE,gBAAK,EAAE,kBAAqB,CAAC;QAEpD,IAAM,MAAM,GAAG;YACb,MAAM,QAAA;YACN,OAAO,SAAA;YACP,IAAI,MAAA;YACJ,KAAK,OAAA;YACL,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;QAEF,OAAO,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAC5C,CAAC;IA1EM,qBAAY,GAAG;QACpB,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;QACnC,UAAU,EAAE,SAAS,CAAC,MAAM;KAC7B,CAAC;IAEK,kBAAS,GAAG;QACjB,QAAQ,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;QACrC,SAAS,EAAE,SAAS,CAAC,MAAM;QAC3B,kBAAkB,EAAE,SAAS,CAAC,MAAM;QACpC,cAAc,EAAE,SAAS,CAAC,SAAS,CAAC;YAClC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5E,SAAS,CAAC,IAAI;SACf,CAAC;QACF,mBAAmB,EAAE,SAAS,CAAC,IAAI;QACnC,MAAM,EAAE,SAAS,CAAC,IAAI;QACtB,QAAQ,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;QACnC,WAAW,EAAE,SAAS,CAAC,IAAI;QAC3B,OAAO,EAAE,SAAS,CAAC,IAAI;QACvB,WAAW,EAAE,SAAS,CAAC,MAAM;KAC9B,CAAC;IAoLJ,eAAC;CAAA,AA3MD,CAAqE,KAAK,CAAC,SAAS,GA2MnF;AAED,eAAe,QAAQ,CAAC\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport { ApolloError } from 'apollo-client';\r\nvar invariant = require('invariant');\r\nvar shallowEqual = require('fbjs/lib/shallowEqual');\r\nimport { parser, DocumentType } from './parser';\r\nimport { getClient } from './component-utils';\r\nvar initialState = {\r\n    loading: false,\r\n    called: false,\r\n    error: undefined,\r\n    data: undefined,\r\n};\r\nvar Mutation = (function (_super) {\r\n    tslib_1.__extends(Mutation, _super);\r\n    function Mutation(props, context) {\r\n        var _this = _super.call(this, props, context) || this;\r\n        _this.hasMounted = false;\r\n        _this.runMutation = function (options) {\r\n            if (options === void 0) { options = {}; }\r\n            _this.onMutationStart();\r\n            var mutationId = _this.generateNewMutationId();\r\n            return _this.mutate(options)\r\n                .then(function (response) {\r\n                _this.onMutationCompleted(response, mutationId);\r\n                return response;\r\n            })\r\n                .catch(function (e) {\r\n                _this.onMutationError(e, mutationId);\r\n                if (!_this.props.onError)\r\n                    throw e;\r\n            });\r\n        };\r\n        _this.mutate = function (options) {\r\n            var _a = _this.props, mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, update = _a.update, _b = _a.context, context = _b === void 0 ? {} : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, fetchPolicy = _a.fetchPolicy;\r\n            var mutateOptions = tslib_1.__assign({}, options);\r\n            var refetchQueries = mutateOptions.refetchQueries || _this.props.refetchQueries;\r\n            if (refetchQueries && refetchQueries.length && Array.isArray(refetchQueries)) {\r\n                refetchQueries = refetchQueries.map(function (x) {\r\n                    if (typeof x === 'string' && _this.context.operations)\r\n                        return _this.context.operations.get(x) || x;\r\n                    return x;\r\n                });\r\n                delete mutateOptions.refetchQueries;\r\n            }\r\n            var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\r\n            delete mutateOptions.variables;\r\n            return _this.client.mutate(tslib_1.__assign({ mutation: mutation,\r\n                optimisticResponse: optimisticResponse,\r\n                refetchQueries: refetchQueries,\r\n                awaitRefetchQueries: awaitRefetchQueries,\r\n                update: update,\r\n                context: context,\r\n                fetchPolicy: fetchPolicy, variables: mutateVariables }, mutateOptions));\r\n        };\r\n        _this.onMutationStart = function () {\r\n            if (!_this.state.loading && !_this.props.ignoreResults) {\r\n                _this.setState({\r\n                    loading: true,\r\n                    error: undefined,\r\n                    data: undefined,\r\n                    called: true,\r\n                });\r\n            }\r\n        };\r\n        _this.onMutationCompleted = function (response, mutationId) {\r\n            if (_this.hasMounted === false) {\r\n                return;\r\n            }\r\n            var _a = _this.props, onCompleted = _a.onCompleted, ignoreResults = _a.ignoreResults;\r\n            var data = response.data, errors = response.errors;\r\n            var error = errors && errors.length > 0 ? new ApolloError({ graphQLErrors: errors }) : undefined;\r\n            var callOncomplete = function () { return (onCompleted ? onCompleted(data) : null); };\r\n            if (_this.isMostRecentMutation(mutationId) && !ignoreResults) {\r\n                _this.setState({ loading: false, data: data, error: error }, callOncomplete);\r\n            }\r\n            else {\r\n                callOncomplete();\r\n            }\r\n        };\r\n        _this.onMutationError = function (error, mutationId) {\r\n            if (_this.hasMounted === false) {\r\n                return;\r\n            }\r\n            var onError = _this.props.onError;\r\n            var callOnError = function () { return (onError ? onError(error) : null); };\r\n            if (_this.isMostRecentMutation(mutationId)) {\r\n                _this.setState({ loading: false, error: error }, callOnError);\r\n            }\r\n            else {\r\n                callOnError();\r\n            }\r\n        };\r\n        _this.generateNewMutationId = function () {\r\n            _this.mostRecentMutationId = _this.mostRecentMutationId + 1;\r\n            return _this.mostRecentMutationId;\r\n        };\r\n        _this.isMostRecentMutation = function (mutationId) {\r\n            return _this.mostRecentMutationId === mutationId;\r\n        };\r\n        _this.verifyDocumentIsMutation = function (mutation) {\r\n            var operation = parser(mutation);\r\n            invariant(operation.type === DocumentType.Mutation, \"The <Mutation /> component requires a graphql mutation, but got a \" + (operation.type === DocumentType.Query ? 'query' : 'subscription') + \".\");\r\n        };\r\n        _this.client = getClient(props, context);\r\n        _this.verifyDocumentIsMutation(props.mutation);\r\n        _this.mostRecentMutationId = 0;\r\n        _this.state = initialState;\r\n        return _this;\r\n    }\r\n    Mutation.prototype.componentDidMount = function () {\r\n        this.hasMounted = true;\r\n    };\r\n    Mutation.prototype.componentWillUnmount = function () {\r\n        this.hasMounted = false;\r\n    };\r\n    Mutation.prototype.componentWillReceiveProps = function (nextProps, nextContext) {\r\n        var nextClient = getClient(nextProps, nextContext);\r\n        if (shallowEqual(this.props, nextProps) && this.client === nextClient) {\r\n            return;\r\n        }\r\n        if (this.props.mutation !== nextProps.mutation) {\r\n            this.verifyDocumentIsMutation(nextProps.mutation);\r\n        }\r\n        if (this.client !== nextClient) {\r\n            this.client = nextClient;\r\n            this.setState(initialState);\r\n        }\r\n    };\r\n    Mutation.prototype.render = function () {\r\n        var children = this.props.children;\r\n        var _a = this.state, loading = _a.loading, data = _a.data, error = _a.error, called = _a.called;\r\n        var result = {\r\n            called: called,\r\n            loading: loading,\r\n            data: data,\r\n            error: error,\r\n            client: this.client,\r\n        };\r\n        return children(this.runMutation, result);\r\n    };\r\n    Mutation.contextTypes = {\r\n        client: PropTypes.object.isRequired,\r\n        operations: PropTypes.object,\r\n    };\r\n    Mutation.propTypes = {\r\n        mutation: PropTypes.object.isRequired,\r\n        variables: PropTypes.object,\r\n        optimisticResponse: PropTypes.object,\r\n        refetchQueries: PropTypes.oneOfType([\r\n            PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])),\r\n            PropTypes.func,\r\n        ]),\r\n        awaitRefetchQueries: PropTypes.bool,\r\n        update: PropTypes.func,\r\n        children: PropTypes.func.isRequired,\r\n        onCompleted: PropTypes.func,\r\n        onError: PropTypes.func,\r\n        fetchPolicy: PropTypes.string,\r\n    };\r\n    return Mutation;\r\n}(React.Component));\r\nexport default Mutation;\r\n//# sourceMappingURL=Mutation.js.map","dts":{"name":"/Users/jovi/Documents/SideProjects/react-apollo/src/Mutation.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport ApolloClient, { PureQueryOptions, ApolloError, FetchPolicy } from 'apollo-client';\r\nimport { DataProxy } from 'apollo-cache';\r\nimport { DocumentNode, GraphQLError } from 'graphql';\r\nimport { OperationVariables, RefetchQueriesProviderFn } from './types';\r\nexport interface MutationResult<TData = Record<string, any>> {\r\n    data?: TData;\r\n    error?: ApolloError;\r\n    loading: boolean;\r\n    called: boolean;\r\n    client: ApolloClient<Object>;\r\n}\r\nexport interface MutationContext {\r\n    client?: ApolloClient<Object>;\r\n    operations: Map<string, {\r\n        query: DocumentNode;\r\n        variables: any;\r\n    }>;\r\n}\r\nexport interface ExecutionResult<T = Record<string, any>> {\r\n    data?: T;\r\n    extensions?: Record<string, any>;\r\n    errors?: GraphQLError[];\r\n}\r\nexport declare type MutationUpdaterFn<T = {\r\n    [key: string]: any;\r\n}> = (proxy: DataProxy, mutationResult: FetchResult<T>) => void;\r\nexport declare type FetchResult<C = Record<string, any>, E = Record<string, any>> = ExecutionResult<C> & {\r\n    extensions?: E;\r\n    context?: C;\r\n};\r\nexport declare type MutationOptions<TData = any, TVariables = OperationVariables> = {\r\n    variables?: TVariables;\r\n    optimisticResponse?: TData;\r\n    refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesProviderFn;\r\n    awaitRefetchQueries?: boolean;\r\n    update?: MutationUpdaterFn<TData>;\r\n    context?: Record<string, any>;\r\n    fetchPolicy?: FetchPolicy;\r\n};\r\nexport declare type MutationFn<TData = any, TVariables = OperationVariables> = (options?: MutationOptions<TData, TVariables>) => Promise<void | FetchResult<TData>>;\r\nexport interface MutationProps<TData = any, TVariables = OperationVariables> {\r\n    client?: ApolloClient<Object>;\r\n    mutation: DocumentNode;\r\n    ignoreResults?: boolean;\r\n    optimisticResponse?: TData;\r\n    variables?: TVariables;\r\n    refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesProviderFn;\r\n    awaitRefetchQueries?: boolean;\r\n    update?: MutationUpdaterFn<TData>;\r\n    children: (mutateFn: MutationFn<TData, TVariables>, result: MutationResult<TData>) => React.ReactNode;\r\n    onCompleted?: (data: TData) => void;\r\n    onError?: (error: ApolloError) => void;\r\n    context?: Record<string, any>;\r\n    fetchPolicy?: FetchPolicy;\r\n}\r\nexport interface MutationState<TData = any> {\r\n    called: boolean;\r\n    error?: ApolloError;\r\n    data?: TData;\r\n    loading: boolean;\r\n}\r\ndeclare class Mutation<TData = any, TVariables = OperationVariables> extends React.Component<MutationProps<TData, TVariables>, MutationState<TData>> {\r\n    static contextTypes: {\r\n        client: PropTypes.Validator<object>;\r\n        operations: PropTypes.Requireable<object>;\r\n    };\r\n    static propTypes: {\r\n        mutation: PropTypes.Validator<object>;\r\n        variables: PropTypes.Requireable<object>;\r\n        optimisticResponse: PropTypes.Requireable<object>;\r\n        refetchQueries: PropTypes.Requireable<(string | object | null)[] | ((...args: any[]) => any)>;\r\n        awaitRefetchQueries: PropTypes.Requireable<boolean>;\r\n        update: PropTypes.Requireable<(...args: any[]) => any>;\r\n        children: PropTypes.Validator<(...args: any[]) => any>;\r\n        onCompleted: PropTypes.Requireable<(...args: any[]) => any>;\r\n        onError: PropTypes.Requireable<(...args: any[]) => any>;\r\n        fetchPolicy: PropTypes.Requireable<string>;\r\n    };\r\n    private client;\r\n    private mostRecentMutationId;\r\n    private hasMounted;\r\n    constructor(props: MutationProps<TData, TVariables>, context: any);\r\n    componentDidMount(): void;\r\n    componentWillUnmount(): void;\r\n    componentWillReceiveProps(nextProps: MutationProps<TData, TVariables>, nextContext: MutationContext): void;\r\n    render(): React.ReactNode;\r\n    private runMutation;\r\n    private mutate;\r\n    private onMutationStart;\r\n    private onMutationCompleted;\r\n    private onMutationError;\r\n    private generateNewMutationId;\r\n    private isMostRecentMutation;\r\n    private verifyDocumentIsMutation;\r\n}\r\nexport default Mutation;\r\n"}}
